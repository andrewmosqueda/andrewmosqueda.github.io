{
    "version": "https://jsonfeed.org/version/1",
    "title": "Andrew Mosqueda",
    "description": "",
    "home_page_url": "https://andrewmosqueda.github.io",
    "feed_url": "https://andrewmosqueda.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Andrew Mosqueda"
    },
    "items": [
        {
            "id": "https://andrewmosqueda.github.io/using-the-slope-compensation-for-the-current-mode-control/",
            "url": "https://andrewmosqueda.github.io/using-the-slope-compensation-for-the-current-mode-control/",
            "title": "Using the slope compensation for the current mode control",
            "summary": "INTRODUCTION In the previous article Current Mode Converter , the PWM control is generated based from the comparison of the output of the DAC to the actual current of the high side mosfet. See illustration below. The DAC converts the digital result value of the PID&hellip;",
            "content_html": "<h2>INTRODUCTION</h2>\n<figure class=\"post__image\">In the previous article <a href=\"https://andrewmosqueda.github.io/current-mode/\" target=\"_blank\" rel=\"noopener noreferrer\"></a><a href=\"https://andrewmosqueda.github.io/current-mode/\" target=\"_blank\" rel=\"noopener noreferrer\">Current Mode Converter</a> , the PWM control is generated based from the comparison of the output of the DAC to the actual current of the high side mosfet. See illustration below.<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/9/close-loop.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/9/responsive/close-loop-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/9/responsive/close-loop-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/9/responsive/close-loop-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/9/responsive/close-loop-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/9/responsive/close-loop-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/9/responsive/close-loop-2xl.jpg 1600w\"  alt=\"Current Controlled Buck Converter\" width=\"983\" height=\"578\"></figure>\n<figure class=\"post__image\">The DAC converts the digital result value of the PID function  into analog. The DAC was configured in DC Mode as seen on the image below.<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/9/CMP-DC-Mode.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-DC-Mode-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-DC-Mode-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-DC-Mode-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-DC-Mode-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-DC-Mode-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-DC-Mode-2xl.jpg 1600w\"  alt=\"Comparator in DC Mode\" width=\"679\" height=\"519\"></figure>\n<p>In the DC Mode, the output of the DAC changes only after the DACDATAH is updated.</p>\n<p>Actually, the DAC has a slope compensation feature in which the output of the DAC ramps down after DACDATAH is updated. This method makes the control more stable. In this article I will configure the DAC from DC Mode to slope compensation mode. </p>\n<h2>PROCEDURE</h2>\n<ol>\n<li>Open the master and slave projects of the current mode buck control in MPLAB IDE. The MPLAB code of the buck control project is stored here: <a href=\"https://andrewmosqueda.github.io/media/files/buck_ictrl.zip\" target=\"_blank\" rel=\"noopener noreferrer\">buck_ictrl.zip</a></li>\n<li>Right click on the master project and make it the main project.</li>\n<li>Connect the DM330028 board to the PC. Click the \"Make and Program\" button on MPLAB to program the code to the dsPIC33 IC. Wait until a \"Programming/Verify complete\" message is prompted in the output window of MPLAB.</li>\n<li>If we connect an oscilloscope to RB2 and RA3, we would see the waveform below. We can see that the orange waveform (RA3) shuts off after reaching the purple waveform (RB2). The RB2 is the DC value output from the DAC and RA3 is the current sense signal that is fed to the comparator. Note: RB2 is not shown in the simplified schematic that is illustrated above.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/9/RA3vsRB2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/9/responsive/RA3vsRB2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/9/responsive/RA3vsRB2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/9/responsive/RA3vsRB2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/9/responsive/RA3vsRB2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/9/responsive/RA3vsRB2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/9/responsive/RA3vsRB2-2xl.jpg 1600w\"  alt=\"waveform current mode\" width=\"1377\" height=\"768\"></figure></li>\n<li>Right click on the slave project and make it the main project.</li>\n<li>Click MCC button and wait until the slave MCC is completely loaded.</li>\n<li>After the MCC is loaded, open the Master Core Configuration.</li>\n<li>In the Master Core Configuration window, click \"Load Slave Settings from Master Configuration\" button. Select the master_config.mc3 file in the master.X folder then click Open button. Wait until the Notifications [MCC] window is updated.</li>\n<li>In the Project Resources window, click CMP1 (Don't click X) to open the CMP1 analog comparator window. Wait until the window is completely loaded.</li>\n<li>Configure the DAC as shown below. I made the lowest value DACDATAL as 260 because this is 0 current offset value of the DM330028 current sense amplifier. In this configuration, the DAC output will start to ramp down after Slave PWM7 Trigger 1 and ramps back up after either Slave PWM7 Trigger2 or S1CMP1 Output is triggered.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/9/CMP-Slope-Mode.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-Slope-Mode-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-Slope-Mode-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-Slope-Mode-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-Slope-Mode-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-Slope-Mode-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/9/responsive/CMP-Slope-Mode-2xl.jpg 1600w\"  alt=\"Slope Mode Current Control\" width=\"1121\" height=\"672\"></figure></li>\n<li>In the Project Resources window, click PWM (Don't click X) to open the PWM window. Wait until the window is completely loaded.</li>\n<li>Expand the Trigger Control Settings and configure it as shown below. Trigger 1 is triggered 1us after the start of PWM cycle. We have now configure the DAC output to start ramping down after 1us after the start of PWM cycle. Trigger 2 is triggered 25us after the start of PWM cycle. 25us is the period of the 40kHz PWM so the DAC output will go back to DACDATH at the end of the PWM cycle.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/9/Trigger-Control-Settings-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/9/responsive/Trigger-Control-Settings-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/9/responsive/Trigger-Control-Settings-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/9/responsive/Trigger-Control-Settings-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/9/responsive/Trigger-Control-Settings-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/9/responsive/Trigger-Control-Settings-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/9/responsive/Trigger-Control-Settings-2-2xl.jpg 1600w\"  alt=\"PWM Trigger Settings\" width=\"696\" height=\"394\"></figure></li>\n<li>Click the Generate button. Click yes button in the confirmation dialog box and wait until Generation complete is prompted in the MCC output window.</li>\n<li>Click MCC toolbar button to close the MCC configurator application.</li>\n<li>In the projects pane, open main.c file of the slave project.</li>\n<li>In the PID function, add the highlighted code as shown below. <br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/9/PID-function.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/9/responsive/PID-function-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/9/responsive/PID-function-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/9/responsive/PID-function-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/9/responsive/PID-function-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/9/responsive/PID-function-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/9/responsive/PID-function-2xl.jpg 1600w\"  alt=\"PID function\" width=\"773\" height=\"147\"></figure>260 is the assigned value of the DAC1DATL. The multiplier 0.003 calculation is shown below.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/9/multipler.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/9/responsive/multipler-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/9/responsive/multipler-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/9/responsive/multipler-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/9/responsive/multipler-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/9/responsive/multipler-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/9/responsive/multipler-2xl.jpg 1600w\"  alt=\"slope value multiplier calculation\" width=\"479\" height=\"303\"></figure></li>\n<li>Right click on the master project file and set it as the main project.</li>\n<li>Click Make and Program button and wait until the Programming/Verify complete is prompted on the log window.</li>\n</ol>\n<h2>RESULT</h2>\n<figure class=\"post__image\">Purple waveform - DAC output<br>Orange waveform - MOSFET current sense amplifier output<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/9/waveform.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/9/responsive/waveform-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/9/responsive/waveform-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/9/responsive/waveform-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/9/responsive/waveform-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/9/responsive/waveform-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/9/responsive/waveform-2xl.jpg 1600w\"  alt=\"current mode control with slope compensation\" width=\"853\" height=\"476\"></figure>\n<p>It can now be seen that the DAC output (purple) ramps down 1us after the MOSFET begins to conduct (orange waveform) and then quickly return back to high value after the MOSFET has turned off.</p>",
            "author": {
                "name": "Andrew Mosqueda"
            },
            "tags": [
            ],
            "date_published": "2021-11-14T16:12:39+08:00",
            "date_modified": "2021-11-14T22:16:00+08:00"
        },
        {
            "id": "https://andrewmosqueda.github.io/simulation-of-the-pwm-control-input-pci-current-limit-logic-of-dspic33ch/",
            "url": "https://andrewmosqueda.github.io/simulation-of-the-pwm-control-input-pci-current-limit-logic-of-dspic33ch/",
            "title": "Simulation of the PCI-Current Limit Logic of dsPIC33CH",
            "summary": "INTRODUCTION The dsPIC33CH IC has a PCI CL (PWM Control Input-Current Limit) Logic that is use for Current Mode Controlled Converter. An equivalent circuit in LTSPICE is simulated to gain better insights of this logic system. The simulated circuit is based on actual circuit values&hellip;",
            "content_html": "<h2>INTRODUCTION</h2>\n<p>The dsPIC33CH IC has a PCI CL (PWM Control Input-Current Limit) Logic that is use for Current Mode Controlled Converter. An equivalent circuit in LTSPICE is simulated to gain better insights of this logic system. The simulated circuit is based on actual circuit values in the DM330038 dsPIC33CH Curiosity Development Board.</p>\n<p>SIMPLIFIED BUCK CONVERTER SCHEMATIC</p>\n<figure class=\"post__image\">Below is a simplified schematic of the current mode controlled buck converter of the board with connection to the dsPIC33CH IC. The PWM duty cycle is fixed at usually 95%. the PCI CL purpose is to override (block or truncate) the PWM output everytime the output of the current sense circuit exceeds the reference value. The reference value is an analog voltage generated from the PID by a DAC.<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/8/close-loop.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/8/responsive/close-loop-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/8/responsive/close-loop-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/8/responsive/close-loop-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/8/responsive/close-loop-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/8/responsive/close-loop-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/8/responsive/close-loop-2xl.jpg 1600w\"  alt=\"Buck Converter with dsPIC33CH\" width=\"983\" height=\"578\"></figure>\n<p>From above figure, we can see that the PCI-CL is part of the PWM Module of the IC.</p>\n<p>PCI DIAGRAM</p>\n<figure class=\"post__image\">Below is the diagram of the PCI from DS70005320B document. <br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/8/pci.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/8/responsive/pci-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/8/responsive/pci-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/8/responsive/pci-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/8/responsive/pci-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/8/responsive/pci-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/8/responsive/pci-2xl.jpg 1600w\"  alt=\"PWM Control Input Logic\" width=\"933\" height=\"656\"></figure>\n<p>The table below are the register values from above diagram that are needed to configure in order for the PCI to become a current limit logic for the current mode converter:</p>\n<table style=\"border-collapse: collapse; width: 73.5462%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 19.3732%;\"><strong>Register</strong></td>\n<td style=\"width: 10.9378%;\"><strong>Hex Value</strong></td>\n<td style=\"width: 56.2236%;\"><strong>Value Definition</strong></td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">PSS</td>\n<td style=\"width: 10.9378%;\">28</td>\n<td style=\"width: 56.2236%;\">Slave 1 Comparator 1 output</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">PPS</td>\n<td style=\"width: 10.9378%;\">0</td>\n<td style=\"width: 56.2236%;\">Not inverted</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">PSYNC</td>\n<td style=\"width: 10.9378%;\">0</td>\n<td style=\"width: 56.2236%;\">disabled</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">AQSS</td>\n<td style=\"width: 10.9378%;\">2</td>\n<td style=\"width: 56.2236%;\">LEB is Active</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">AQPS</td>\n<td style=\"width: 10.9378%;\">1</td>\n<td style=\"width: 56.2236%;\">Inverted</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">TERM</td>\n<td style=\"width: 10.9378%;\">1</td>\n<td style=\"width: 56.2236%;\">Auto-Terminate</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">SWTERM</td>\n<td style=\"width: 10.9378%;\">0</td>\n<td style=\"width: 56.2236%;\">disabled</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">TSYNCDIS</td>\n<td style=\"width: 10.9378%;\">0</td>\n<td style=\"width: 56.2236%;\">PWM EOC</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">TQSS</td>\n<td style=\"width: 10.9378%;\">0</td>\n<td style=\"width: 56.2236%;\">No Termination Qualifier, Force 1</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">TQPS</td>\n<td style=\"width: 10.9378%;\">0</td>\n<td style=\"width: 56.2236%;\">Not inverted</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">ACP</td>\n<td style=\"width: 10.9378%;\">3</td>\n<td style=\"width: 56.2236%;\">Latched</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">BPEN</td>\n<td style=\"width: 10.9378%;\">0</td>\n<td style=\"width: 56.2236%;\">disabled</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">SWPCI</td>\n<td style=\"width: 10.9378%;\">0</td>\n<td style=\"width: 56.2236%;\">Drives '0'</td>\n</tr>\n<tr>\n<td style=\"width: 19.3732%;\">SWPCIM</td>\n<td style=\"width: 10.9378%;\">0</td>\n<td style=\"width: 56.2236%;\">PCI acceptance logic</td>\n</tr>\n</tbody>\n</table>\n<p>By using the values of the registers in the above table. The PCI logic is simplified to the diagram below.</p>\n<figure class=\"post__image\" ><br><img loading=\"lazy\" src=\"https://andrewmosqueda.github.io/media/posts/8/PCI-CL-Simplified.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simplified-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simplified-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simplified-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simplified-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simplified-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simplified-2xl.jpg 1600w\"  alt=\"PCI Current Limit Logic Simplified Diagram\" width=\"907\" height=\"256\">\n<figcaption >PCI Current Limit Simplified Diagram</figcaption>\n</figure>\n<p>The Leading Edge Blanking (LEB) is a counter circuit that is synchronized with the PWM output and becomes Active after the PWM output becomes high and then resets/stop after the PWM becomes low. The purpose of the LEB is to ignore switching transients. </p>\n<p>The Auto-Terminate is a logic circuit that detects falling signal of the comparator output and is reset every start of PWM cycle.</p>\n<p>LTSPICE SIMULATION CIRCUIT</p>\n<figure class=\"post__image\">Below is the LTSPICE schematic for the simulation of this simplfied current limit logic with the comparator, pwm and power circuit. The Analog Comparator Reference is fixed at 0.75 for debugging purposes. The ADC and PID are not included in this simulation for simplicity. The LEB is replaced by a DFLOP instead of a counter for shorter simulation time. The output POLARITY is inverted because Power MOSFET Q6 needs 0V to turn on.<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/8/PCI-CL-Simulation-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simulation-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simulation-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simulation-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simulation-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simulation-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/8/responsive/PCI-CL-Simulation-2-2xl.jpg 1600w\"  alt=\"DSPIC33 PCI Current Limit Simulation LTSPICE\" width=\"942\" height=\"776\"></figure>\n<p>LTSPICE SIMULATION RESULT</p>\n<figure class=\"post__image\">Below are some of the waveforms from the result of the simulation. The first plot pane from the top shows the PWM output running at 95% duty cycle. The 2nd plot pane from the top shows PCI_Active signal which blocks the PWM output. The truncated output PWM7H is shown in the third plot from the top. The red waveform Ix(Q6:S) is the current flow in power MOSFET Q6. The 4th plot from the top shows the momentary pulse from the comparator output PCI_SOURCE when the sense current RA3_ISENSEH reached the reference voltage DAC.<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/8/waveforms-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/8/responsive/waveforms-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/8/responsive/waveforms-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/8/responsive/waveforms-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/8/responsive/waveforms-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/8/responsive/waveforms-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/8/responsive/waveforms-2-2xl.jpg 1600w\"  alt=\"DSPIC33 PCI Current Limit Simulation\" width=\"935\" height=\"877\"></figure>\n<p> </p>\n<p>LTSPICE Simulation Files: <a href=\"https://andrewmosqueda.github.io/media/files/DSPIC33 PCI Current Limit Simulation.zip\" target=\"_blank\" rel=\"noopener noreferrer\">DSPIC33 PCI Current Limit Simulation LTSPICE</a></p>\n<p> </p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Andrew Mosqueda"
            },
            "tags": [
            ],
            "date_published": "2021-09-26T17:12:03+08:00",
            "date_modified": "2021-09-29T21:48:19+08:00"
        },
        {
            "id": "https://andrewmosqueda.github.io/high-side-current-sense-circuit-simulation/",
            "url": "https://andrewmosqueda.github.io/high-side-current-sense-circuit-simulation/",
            "title": "High Side Current Sense Circuit Simulation",
            "summary": "LTSPICE simulation files: High Side Current Sense LTSPICE simulation Mathcad files: High Side Current Sense Calculations The high side current sense circuit of DM330028 dsPIC33CH Curiosity Development board as shown below is simulated in LTSPICE and results are shown after. I also included a mathcad calculation&hellip;",
            "content_html": "<p>LTSPICE simulation files: <a href=\"https://andrewmosqueda.github.io/media/files/high_side_current_sense.zip\" target=\"_blank\" rel=\"noopener noreferrer\">High Side Current Sense LTSPICE simulation</a></p>\n<p>Mathcad files: <a href=\"https://andrewmosqueda.github.io/media/files/High Side Current Measurement.mcdx\" target=\"_blank\" rel=\"noopener noreferrer\">High Side Current Sense Calculations</a></p>\n<h2>INTRODUCTION</h2>\n<p>The high side current sense circuit of DM330028 dsPIC33CH Curiosity Development board as shown below is simulated in LTSPICE and results are shown after. I also included a mathcad calculation file to quickly verify the results.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/7/current-sense-resistors.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-resistors-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-resistors-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-resistors-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-resistors-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-resistors-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-resistors-2xl.jpg 1600w\"  alt=\"High Side Current Sense Resistors\" width=\"406\" height=\"207\"></figure><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/7/current-sense-circuit.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-circuit-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-circuit-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-circuit-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-circuit-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-circuit-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/7/responsive/current-sense-circuit-2xl.jpg 1600w\"  alt=\"Level Shifter\" width=\"743\" height=\"417\"></figure>\n<h2>LTSPICE SIMULATION CIRCUIT</h2>\n<p>The LTSPICE simulation files link is on the topmost of this page.</p>\n<figure class=\"post__image\"><br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/7/high-side-current-sense-simulation-circuit.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-circuit-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-circuit-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-circuit-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-circuit-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-circuit-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-circuit-2xl.jpg 1600w\"  alt=\"High Side Current Sense Simulation Circuit\" width=\"827\" height=\"740\"></figure>\n<h2>RESULT</h2>\n<figure class=\"post__image\"><br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/7/high-side-current-sense-simulation-result.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-result-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-result-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-result-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-result-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-result-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/7/responsive/high-side-current-sense-simulation-result-2xl.jpg 1600w\"  alt=\"High side current sense simulation result\" width=\"912\" height=\"829\"></figure>\n<h2> </h2>",
            "author": {
                "name": "Andrew Mosqueda"
            },
            "tags": [
            ],
            "date_published": "2021-09-25T08:56:51+08:00",
            "date_modified": "2021-09-30T20:02:09+08:00"
        },
        {
            "id": "https://andrewmosqueda.github.io/current-mode/",
            "url": "https://andrewmosqueda.github.io/current-mode/",
            "title": "5V to 3.3V Peak Current Mode Buck Converter in the DSPIC33CH Curiosity Development Board",
            "summary": "INTRODUCTION I will demonstrate here how to convert the previous voltage mode buck converter discussed in Voltage Mode Buck Converter to current mode. The code of the voltage mode buck converter is stored here --&gt; Voltage Mode Buck Converter - MPLAB source code. Before doing&hellip;",
            "content_html": "<h2>INTRODUCTION</h2>\n<p>I will demonstrate here how to convert the previous voltage mode buck converter discussed in <a href=\"https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/\" target=\"_blank\" rel=\"noopener noreferrer\">Voltage Mode Buck Converter</a> to current mode. The code of the voltage mode buck converter is stored here --&gt; <a href=\"https://andrewmosqueda.github.io/media/files/DM330028 buck converter vmode MPLAB.zip\" target=\"_blank\" rel=\"noopener noreferrer\">Voltage Mode Buck Converter - MPLAB source code</a>.</p>\n<figure class=\"post__image\">Below is the simplified schematic of the DM330028 board's buck converter with the dsPIC33CH128MP508 I/Os. In contrast with the voltage mode converter, the IC has additional input to monitor the Power MOSFET current via RA3_ISENSEH pin. The High-Speed Analog Comparator Module is utilized to monitor this current. The duty cycle of the PWM duty cycle is also fixed to a high value (95%). Instead of the PID function changing the PWM duty cycle, its result is converted into an analog voltage by the DAC and compared to the power MOSFET current by the Comparator. So when the sense current exceeds the DAC output, the comparator output will turn high. Inside the PWM module, there is a PWM Control Input Current Limit (PCI CL) logic circuit that monitors the analog comparator output and PWM states like End-of-Cycle (EOC). The PCI CL output toggles and truncates the PWM output whenever the Analog Comparator output turns high. It then resets after detecting PWM EOC.<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/close-loop-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/close-loop-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/close-loop-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/close-loop-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/close-loop-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/close-loop-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/close-loop-2-2xl.jpg 1600w\"  alt=\"Current Mode Buck Converter\" width=\"983\" height=\"578\"></figure>\n<p>Before doing the coding, it is good to understand first each circuit and modules.</p>\n<p>CURRENT SENSE CIRCUIT</p>\n<p>The power MOSFET Q6 high side current sense circuit is shown below. The voltage drop at R59 and R74 resistors is used to monitor the current at Q6. The purpose of R97 and R102 divider resistors is to make a positive bias at the dsPIC analog input pin. According to DS50002762A document, the purpose of the intentional small bias is to ensure that the current sense voltage signal is always within the internal analog comparator input sensing range and the internal DAC reachable range.</p>\n<p>I have written the derivation of the equations in mathcad (<a href=\"https://andrewmosqueda.github.io/media/files/High Side Current Measurement.mcdx\" target=\"_blank\" rel=\"noopener noreferrer\">get mathcad file here</a>) and simulate in LTSPICE (<a href=\"https://andrewmosqueda.github.io/high-side-current-sense-circuit-simulation/\" target=\"_blank\" rel=\"noopener noreferrer\">High Side Current Sense LTSPICE Simulation</a>) to easily understand the circuit. </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/current-sense-resistors.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-resistors-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-resistors-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-resistors-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-resistors-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-resistors-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-resistors-2xl.jpg 1600w\"  alt=\"DM330028 Current Sense Resistors\" width=\"406\" height=\"207\"></figure>\n<figure class=\"post__image\"><br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/current-sense-circuit-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-circuit-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-circuit-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-circuit-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-circuit-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-circuit-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/current-sense-circuit-2-2xl.jpg 1600w\"  alt=\"High side current sense amplifier\" width=\"743\" height=\"417\"></figure>\n<p>ANALOG COMPARATOR MODULE</p>\n<figure class=\"post__image\">The RA3 pin of the dsPIC33CH IC will be configured as +input to an internal analog comparator. Below is the diagram of the internal analog comparator of the DSPIC33 IC  that is defined in DS70005280B document. The INSEL&lt;2:0&gt; register is set to S1CMP1A because this is the one connected to the RA3 pin. The PDM (Pulse Density Modulation) generates an analog voltage with level that depends on the values stored on SLPxDAT, DACxDATH and DACxDATL registers. The SLPxDAT and DACxDATL are used in slope compensation. For simplicity of this exercise, the slope compensation feature of the PDM is disabled so the output will just depend on the DACxDATH register. The PID value (compensated error value, see topic <a href=\"https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/\" target=\"_blank\" rel=\"noopener noreferrer\">Voltage Mode Converter</a> topic) is then stored to the DACxDATH register to dynamically adjust the comparator current threshold. DACOUT1 can be used to monitor the actual output of the PDM by an oscilloscope. The Digital Filter will also be enabled to filter unwanted output due to switching noise.<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/Comparator.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-2xl.jpg 1600w\"  alt=\"DSPIC33 High Speed Comparator Module\" width=\"873\" height=\"565\"></figure>\n<p>PWM CONTROL INPUT CURRENT LIMIT (PCI CL)</p>\n<figure class=\"post__image\">The output of the internal analog comparator described above is then fed to an internal PCI logic circuit as shown below. <br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/pci.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/pci-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/pci-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/pci-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/pci-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/pci-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/pci-2xl.jpg 1600w\"  alt=\"PCI Function Block Diagram\" width=\"933\" height=\"656\"></figure>\n<p>The PCI Acceptance logic block above has three dynamic inputs; <strong>PCI Source, Qualifier </strong>and <strong>Terminator</strong>. Its ACP register is set so that it becomes Latched Mode. The Latched Mode logic is shown below.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/PCI-acceptance-logic-latched-mode.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/PCI-acceptance-logic-latched-mode-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PCI-acceptance-logic-latched-mode-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PCI-acceptance-logic-latched-mode-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PCI-acceptance-logic-latched-mode-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PCI-acceptance-logic-latched-mode-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PCI-acceptance-logic-latched-mode-2xl.jpg 1600w\"  alt=\"PCI Acceptance Logic in Latched Mode\" width=\"269\" height=\"151\"></figure>\n<p>The input to the <strong>PCI Source</strong> is set from the analog comparator output. The input to the <strong>Qualifier </strong>is set as LEB (Leading Edge Blanking Active). The LEB is a counter which starts after PWM7H (PWM output) rises up and resets/stop when PWM7H falls down .The purpose of the LEB qualifier is to prevent unwanted turn off of the PWM during start of cycle due to unwanted transients during switching. The input to the <strong>Terminator </strong>is the AND of Auto-Terminate and EOC Event. Auto-Terminate becomes high when the analog comparator transitions from high to low. The auto-terminate ensures  that the PWM output is turned off while the current is above threshold even if the EOC Event is already reached. </p>\n<p>I have simulated the PCI CL with the comparator, PWM and the buck converter circuit in LTSPICE to have better insight about the circuit operation. See <a href=\"https://andrewmosqueda.github.io/simulation-of-the-pwm-control-input-pci-current-limit-logic-of-dspic33ch/\" target=\"_blank\" rel=\"noopener noreferrer\">PCI Current Limit Simulation.</a></p>\n<h2>PROCEDURE</h2>\n<ol>\n<li>Save the buck converter files to a different folder. </li>\n<li>Open MPLAB X IDE. After opening, close any opened projects.</li>\n<li>Open the master and slave projects of the voltage mode buck converter.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/projects.PNG\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/projects-xs.PNG 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/projects-sm.PNG 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/projects-md.PNG 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/projects-lg.PNG 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/projects-xl.PNG 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/projects-2xl.PNG 1600w\"  alt=\"MPLAB Projects pane\" width=\"190\" height=\"390\"></figure></li>\n<li>Ensure that the master project is the main project.</li>\n<li>Click the MCC button and wait the MCC to finish loading.</li>\n<li>In the Pin Manager: Grid View, set RB2 as owned by Slave Core. This pin will be used to monitor the the DAC reference for the internal analog comparator by an oscilloscope.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/Pin-Manager-RB2-DACout-slave-owned.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/Pin-Manager-RB2-DACout-slave-owned-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Pin-Manager-RB2-DACout-slave-owned-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Pin-Manager-RB2-DACout-slave-owned-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Pin-Manager-RB2-DACout-slave-owned-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Pin-Manager-RB2-DACout-slave-owned-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Pin-Manager-RB2-DACout-slave-owned-2xl.jpg 1600w\"  alt=\"MPLAB MCC Pin Manager\" width=\"612\" height=\"173\"></figure></li>\n<li>Click the Slave Core on the Project Resources pane to open the Slave Core Configuration.</li>\n<li>Click Slave Master Settings button.</li>\n<li>In the Project Resources pane, click the Generate button. Wait for the Generation Complete message to appear on the output prompt window.</li>\n<li> Click the MCC button to close the MCC application.</li>\n<li>Go back to the Projects tab on the left pane and set the slave project as Main Project.</li>\n<li>Click the MCC button and wait the MCC to finish loading.</li>\n<li>On the Master Core configuration pane, click the Load Slave Settings from Master Configuration button. Locate and select the master_config.mc3 file that was generated by the master project MCC and then after that click the open button.</li>\n<li>On the System Module pane, tick PLL Enable, select 1:100 as Feedback and FVCO/2 as AVCO Divider. These frequency settings are needed for the DAC of the Analog Comprator to function properly. <br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/system-module.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/system-module-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/system-module-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/system-module-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/system-module-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/system-module-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/system-module-2xl.jpg 1600w\"  alt=\"MPLAB MCC System Module Settings\" width=\"471\" height=\"381\"></figure></li>\n<li>On the Device Resources pane, click the + of CMP1 to move it to the Project Resources pane.</li>\n<li>On the CMP1 settings, tick Enable Comparator, Enable Digital Filter and Enable DAC Output. The digital filter is utilized to help filter out switching noises. The DAC output does not help on the operation of the comparator but is used to monitor and debug the comparator.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/Comparator-Settings.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-Settings-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-Settings-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-Settings-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-Settings-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-Settings-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/Comparator-Settings-2xl.jpg 1600w\"  alt=\"MPLAB MCC CMP1 settings\" width=\"580\" height=\"488\"></figure></li>\n<li>On the pin manager, let RA3 assigned to S1CMP1A. RA3 pin is connected to the output of the high current sense circuit of DM330038 board. Note that S1CMP1A is the one selected as the non-inverting input of the analog comparator on the above image.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/S1CMP1A.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/S1CMP1A-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/S1CMP1A-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/S1CMP1A-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/S1CMP1A-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/S1CMP1A-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/S1CMP1A-2xl.jpg 1600w\"  alt=\"MPLAB MCC Pin Manager\" width=\"408\" height=\"265\"></figure></li>\n<li>On the project resources pane, click on PWM to open the PWM configuration.</li>\n<li>Set the fixed Duty Cycle to 95%. <br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/PWM-duty-cycle.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/PWM-duty-cycle-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PWM-duty-cycle-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PWM-duty-cycle-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PWM-duty-cycle-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PWM-duty-cycle-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PWM-duty-cycle-2xl.jpg 1600w\"  alt=\"MPLAB MCC PWM duty cycle settings\" width=\"365\" height=\"90\"></figure></li>\n<li>Click on the Registers tab of the PWM settings. Wait the Registers tab to finish loading.</li>\n<li>Change the PG7CLPCIH settings to the same values with the image below. This register contains some of the settings to make the PCI becomes a current limit logic (<a href=\"https://andrewmosqueda.github.io/simulation-of-the-pwm-control-input-pci-current-limit-logic-of-dspic33ch/\" target=\"_blank\" rel=\"noopener noreferrer\">See PCI-Current Limit Logic for more details</a>). <br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/PG7CLPCIH.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIH-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIH-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIH-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIH-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIH-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIH-2xl.jpg 1600w\"  alt=\"MPLAB MCC PG7CLPCIH Settings\" width=\"306\" height=\"350\"></figure></li>\n<li>Change the PG7CLPCIL settings to the same values with the image below. This register contains the other settings to make the PCI becomes a current limit logic (<a href=\"https://andrewmosqueda.github.io/simulation-of-the-pwm-control-input-pci-current-limit-logic-of-dspic33ch/\" target=\"_blank\" rel=\"noopener noreferrer\">See PCI-Current Limit Logic for more details</a>). Also Slave Comparator 1 output is assigned as the input to the current limit logic.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/PG7CLPCIL-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIL-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIL-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIL-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIL-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIL-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7CLPCIL-2-2xl.jpg 1600w\"  alt=\"MPLAB MCC PG7CLPCIL Configuration\" width=\"357\" height=\"351\"></figure></li>\n<li>In the PG7IOCONH register, change the PENL value to disabled. This value ensures that the low side MOSFET does not turn on.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/PG7IOCONH.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/PG7IOCONH-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7IOCONH-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7IOCONH-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7IOCONH-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7IOCONH-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7IOCONH-2xl.jpg 1600w\"  alt=\"MPLAB MCC PG7IOCONH Settings\" width=\"322\" height=\"315\"></figure></li>\n<li>In the PG7LEBH register, change the PHF to enabled and PWMPCI to 7. The PHF means the PWM7H falling edge will trigger the LEB duration counter. We use a falling edge because we are driving a P MOSFET and a P MOSFET requires a negative polarity drive.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/PG7LEBH-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBH-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBH-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBH-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBH-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBH-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBH-2-2xl.jpg 1600w\"  alt=\"MPLAB MCC PG7LEBH Register\" width=\"200\" height=\"241\"></figure></li>\n<li>In Register: PG7LEBL, change the LEB value to 400. This is an arbitrary value and we can change later depending on the result.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/PG7LEBL.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBL-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBL-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBL-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBL-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBL-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/PG7LEBL-2xl.jpg 1600w\"  alt=\"MPLAB MCC PG7LEBL Configuration\" width=\"227\" height=\"88\"></figure></li>\n<li>On the Project Resources pane, click the Generate button, click Yes button on the MCC Warning confirmation and wait until Generation Complete message is displayed on the output prompt.</li>\n<li>Click the MCC button to close MCC. </li>\n<li>Open main.c file of the slave project.</li>\n<li>In the PID(void) interrupt handler function, In the last line replace PG7DC by DAC1DATH.  Basically, this means that the PID now is now fed to the Slave Comparator 1 negative input instead of directly adjusting the duty cycle of the PWM. At the end of the code append \"+260\" so that the code now becomes: DAC1DATH = n16_integrator_memory + n16_proportional + 260;. The 260 value is compensation to the offset introduced by current sense circuit.</li>\n<li>On line 62 and 63, Change the p_gain to 0.5 and i_gain to 0.1.</li>\n<li>Set the master project as the Main Project.</li>\n<li>Connect the Curiosity Development Board to the PC.</li>\n<li>Click the make and program device button.</li>\n<li>Wait until the Programming/Verify complete is prompted in the output prompt window.</li>\n</ol>\n<h2>RESULT</h2>\n<p>Oscilloscope used: ADALM2000<br>Load:100Ω (Remove power while connecting the load).</p>\n<figure class=\"post__image\">Below are the waveforms for RA3 (Orange, Current Sense Voltage) and RB2 (Purple, DAC output). These two waveforms are the input to the analog comparator. <br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/RA3vsRB2-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRB2-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRB2-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRB2-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRB2-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRB2-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRB2-2-2xl.jpg 1600w\"  alt=\"Sensed Current and DAC waveform\" width=\"1377\" height=\"768\"></figure>\n<figure class=\"post__image\">Below are the waveforms of RA3 (Orange, Current Sense Voltage) and RC14 (Purple, PWM7H output).<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/RA3vsRC14-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRC14-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRC14-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRC14-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRC14-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRC14-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsRC14-2-2xl.jpg 1600w\"  alt=\"Current Sense and PWM7H waveform\" width=\"1371\" height=\"768\"></figure>\n<figure class=\"post__image\">Below are the waveforms of RA3 (Orange, Current Sense Voltage) and VOUT (The output voltage of the converter). Output is the same with the voltage mode converter. See <a href=\"https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/\" target=\"_blank\" rel=\"noopener noreferrer\">Voltage mode buck converter</a><br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/6/RA3vsVout.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsVout-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsVout-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsVout-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsVout-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsVout-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/6/responsive/RA3vsVout-2xl.jpg 1600w\"  alt=\"Current Sense Voltage and Converter Output Voltage\" width=\"1372\" height=\"771\"></figure>\n<p> </p>",
            "author": {
                "name": "Andrew Mosqueda"
            },
            "tags": [
            ],
            "date_published": "2021-09-11T21:52:04+08:00",
            "date_modified": "2021-10-02T18:20:23+08:00"
        },
        {
            "id": "https://andrewmosqueda.github.io/debugging-dspic-using-uart-and-switch-interrupt/",
            "url": "https://andrewmosqueda.github.io/debugging-dspic-using-uart-and-switch-interrupt/",
            "title": "Print debugging dsPIC in Real Time using UART and switch Interrupt",
            "summary": "Introduction This is a tutorial on how to monitor the variables of a dsPIC33CH program in real time specifically on the DM330028 dsPIC33CH Curiosity Development Board using UART and switch Interrupt in MPLAB and MCC. The UART and switch Interrupts will be added to a&hellip;",
            "content_html": "<h2>Introduction</h2>\n<p>This is a tutorial on how to monitor the variables of a dsPIC33CH program in real time specifically on the DM330028 dsPIC33CH Curiosity Development Board using UART and switch Interrupt in MPLAB and MCC. The UART and switch Interrupts will be added to a previous MPLAB project (<a href=\"https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/\" target=\"_blank\" rel=\"noopener noreferrer\">Buck Converter) </a>for simplicity of the explanation.</p>\n<h2>Procedure</h2>\n<ol>\n<li>Run MPLAB X IDE.</li>\n<li>Close if there are other open projects and files.</li>\n<li>Open the buck converter master and slave project.</li>\n</ol>\n<figure class=\"post__image\">MASTER CORE CONFIGURATION<br><br>Below is the UART circuit of the DM330028 dsPIC33CH Curiosity Development Board. The circuit is connected to the dsPIC33CH IC by the RC11_TXB and RC10_RXB. Since the buck operation is running in the slave core, RC11 and RC10 pins should be defined as owned by the slave core.<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/dsPIC33CH-Curiosity-board-UART-circuit.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-UART-circuit-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-UART-circuit-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-UART-circuit-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-UART-circuit-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-UART-circuit-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-UART-circuit-2xl.jpg 1600w\"  alt=\"DM330028 dsPIC33CH Curiosity Development Board UART circuit\" width=\"815\" height=\"443\"></figure>\n<ol>\n<li>If the master project is not bold highlighted, right click on the master project and select set as Main Project.</li>\n<li> Click the MCC button. Wait until MCC is finished loading.</li>\n<li>In the Pin Manager Pane, set RC10 and RC11 as owned by slave.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/Pin-Manager-RC10-RC11.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RC10-RC11-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RC10-RC11-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RC10-RC11-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RC10-RC11-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RC10-RC11-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RC10-RC11-2xl.jpg 1600w\"  alt=\"MPLAB MCC Pin Manager\" width=\"902\" height=\"353\"></figure><br><br>Below is the switches circuit of the DM330028 dsPIC33CH Curiosity Development Board. For this debugging, an interrupt function which contains the UART data transmission will run once everytime switch S1 is pressed. Switch S1 is connected to the dsPIC33CH IC through RE7_S1 pin. Since the buck operation is running in the slave core, RE7 pin should be defined as owned by the slave core.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/dsPIC33CH-Curiosity-board-switch-circuit.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-switch-circuit-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-switch-circuit-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-switch-circuit-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-switch-circuit-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-switch-circuit-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/dsPIC33CH-Curiosity-board-switch-circuit-2xl.jpg 1600w\"  alt=\"DM330028 dsPIC33CH Curiosity Development Board switches circuit\" width=\"363\" height=\"537\"></figure></li>\n<li>In the Pin Manager of the master project MCC, Set RE7 as owned by Slave Core.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/Pin-Manager-RE7.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RE7-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RE7-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RE7-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RE7-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RE7-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/Pin-Manager-RE7-2xl.jpg 1600w\"  alt=\"MPLAB MCC Pin Manager 2\" width=\"1328\" height=\"346\"></figure></li>\n<li>In the Project Resources Pane, click on the Slave Core (<strong>don't click x</strong>) to open the Slave Core pane.</li>\n<li>Click Save Master Settings button. This will update the master_config.mc3 file that will be uploaded later on the Slave project.</li>\n<li>In the Project Resources Pane, click Generate button to update the master core configuration files.</li>\n<li>Click the MCC button to close the master core configuration.</li>\n</ol>\n<p>SLAVE CORE CONFIGURATION</p>\n<ol>\n<li>In the Projects tab, if the slave project is not bold highlighted, right click on the slave project and select set as Main Project.</li>\n<li>Click the MCC button to open the slave core configuration. Wait until the MCC finished loading.</li>\n<li>In the Master Core Pane, click Load Slave Settings from Master Configuration button. Locate and open the master_config.mc3 that was updated in the master core configuration.</li>\n<li>In the Device Resources pane, click + of the UART1 to add UART to the Project Resources pane.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/add-UART.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/add-UART-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/add-UART-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/add-UART-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/add-UART-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/add-UART-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/add-UART-2xl.jpg 1600w\"  alt=\"MPLAB MCC Add UART\" width=\"463\" height=\"341\"></figure></li>\n<li>In the UART1 pane, tick the Redirect Printf to UART.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/UART-printf-redirect.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/UART-printf-redirect-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-printf-redirect-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-printf-redirect-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-printf-redirect-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-printf-redirect-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-printf-redirect-2xl.jpg 1600w\"  alt=\"MPLAB MCC Redirect printf to UART\" width=\"627\" height=\"461\"></figure></li>\n<li>In the Pin Manager Pane, set RC10 pin for S1U1RX of UART1 and RC11 for S1U1TX.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/MPLAB-MCC-UART-pin-manager-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-UART-pin-manager-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-UART-pin-manager-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-UART-pin-manager-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-UART-pin-manager-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-UART-pin-manager-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-UART-pin-manager-2-2xl.jpg 1600w\"  alt=\"MPLAB MCC UART pin configuration\" width=\"655\" height=\"348\"></figure></li>\n<li>In the Pin Module Pane, tick Start High box for RC11. This is to ensure correct Start bit condition.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/UART-TX-start-high.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/UART-TX-start-high-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-TX-start-high-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-TX-start-high-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-TX-start-high-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-TX-start-high-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/UART-TX-start-high-2xl.jpg 1600w\"  alt=\"MPLAB MCC Pin Module configuration\" width=\"1125\" height=\"177\"></figure></li>\n<li>Go back to the Pin Manager pane, set RE7 as GPIO input.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/RE7-input.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-input-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-input-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-input-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-input-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-input-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-input-2xl.jpg 1600w\"  alt=\"MPLAB MCC Slave Core Set RE7 as input\" width=\"881\" height=\"338\"></figure></li>\n<li>Go back to the Pin Module pane. Rename the RE7 Custom Name to RE7_S1 and change the IOC (Interrupt on Change) to negative.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/RE7-switch-pin-module-configurationjpg.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-switch-pin-module-configurationjpg-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-switch-pin-module-configurationjpg-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-switch-pin-module-configurationjpg-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-switch-pin-module-configurationjpg-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-switch-pin-module-configurationjpg-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/RE7-switch-pin-module-configurationjpg-2xl.jpg 1600w\"  alt=\"MPLAB MCC RE7 switch input configuration\" width=\"1152\" height=\"235\"></figure></li>\n<li>In the Project Resources pane, click Generate button to update the Slave Core configuration. Click Yes to confirm.</li>\n<li>Click the MCC button to close the slave core configuration.</li>\n</ol>\n<p>SOURCE CODE</p>\n<ol>\n<li>Open the main.c file of the slave project.</li>\n<li>Append the following after the #include \"mcc_generated_files/adc1.h\" line:<br><code>#include \"mcc_generated_files/uart1.h\"</code></li>\n<li>Append the following after the void PID(void); line:<br><code>void mySw(void);</code><br>This is the declaration of the new program routine that will send UART data every time the switch on RE7 pin is pressed.</li>\n<li>I will monitor the reference, actual and error variables in this exercise. <strong>Modify </strong>the lines int16_t n16_reference; and  int16_t n16_error; to:<br><code>volatile int16_t n16_reference;<br>volatile int16_t n16_error;</code><br>Adding volatile before the declaration of a variable is a must if that variable is to be accessed by different program routines.</li>\n<li>Open the pin_manager.c file of the slave project and check if the Interrupt on Change: negative is 0 (MCC bug) as shown below. <br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/MPLAB-MCC-pin-manager-bug.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-pin-manager-bug-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-pin-manager-bug-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-pin-manager-bug-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-pin-manager-bug-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-pin-manager-bug-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB-MCC-pin-manager-bug-2xl.jpg 1600w\"  alt=\"MPLAB MCC pin manager interrupt config bug\" width=\"540\" height=\"202\"></figure><br>If it is 0, then append the following code after the SYSTEM_Initialize(); line in the main.c file:<br><code>CNEN1Ebits.CNEN1E7 = 1;</code><br>I don't know why MCC sometimes does not configure this correctly even if the IOC settings in MCC (SLAVE CORE CONFIGURATION step 9) is configured correctly.</li>\n<li>Append the following after the ADC1_SetRC1_VOUTFBInterruptHandler(PID); line:<br><code>RE7_S1_SetInterruptHandler(mySw);</code></li>\n<li>Append the following after the void PID(void) program routine:<br><code>void mySw(void)<br>{<br>    printf(\"n16_error=%d n16_reference=%d ADCBUF1=%d\\n\",\\<br>        n16_error, n16_reference, ADCBUF1);<br>}</code></li>\n<li>The modified code should now look like below:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/modified-code.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/modified-code-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/modified-code-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/modified-code-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/modified-code-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/modified-code-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/modified-code-2xl.jpg 1600w\"  alt=\"MPLAB UART code\" width=\"592\" height=\"922\"></figure></li>\n</ol>\n<h2>RESULT</h2>\n<ol>\n<li>Make sure J13 (VFB Gain) of the DM330028 dsPIC33CH Curiosity Development Board is shorted.</li>\n<li>Connect J20 of the Board to the PC.</li>\n<li>Set the master project as the main project.</li>\n<li>Click the program button <figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/MPLAB_program_button.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB_program_button-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB_program_button-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB_program_button-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB_program_button-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB_program_button-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/MPLAB_program_button-2xl.jpg 1600w\"  alt=\"MPLAB program button\" width=\"56\" height=\"40\"></figure>on the MPLAB toolbar.</li>\n<li>Connect J16 of the DM330028 dsPIC33CH Curiosity Development Board to the PC. This connection will be used for UART communication.</li>\n<li>Run a terminal emulator program and connect to the UART. I use the CoolTerm program.</li>\n<li>After pressing RE7 thrice, I got the result as shown below. <br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/5/CoolTerm-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/5/responsive/CoolTerm-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/5/responsive/CoolTerm-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/5/responsive/CoolTerm-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/5/responsive/CoolTerm-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/5/responsive/CoolTerm-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/5/responsive/CoolTerm-2-2xl.jpg 1600w\"  alt=\"CoolTerm\" width=\"861\" height=\"388\"></figure></li>\n</ol>\n<p> </p>",
            "author": {
                "name": "Andrew Mosqueda"
            },
            "tags": [
            ],
            "date_published": "2021-08-25T21:57:12+08:00",
            "date_modified": "2021-09-11T10:15:08+08:00"
        },
        {
            "id": "https://andrewmosqueda.github.io/implementing-5v-to-12v-pwm-boos-converter-in-the-dspic33ch-curiosity-development-board/",
            "url": "https://andrewmosqueda.github.io/implementing-5v-to-12v-pwm-boos-converter-in-the-dspic33ch-curiosity-development-board/",
            "title": "Implementing 5V to 12V PWM Boost Converter in the DSPIC33CH Curiosity Development Board",
            "summary": "Introduction The dsPIC33CH Curiosity Development Board (DM330028) has a built in buck-boost circuit that we can experiment with. Unfortunately in the time of this writing, the code for the buck-boost converter that is provided by Microchip is only written in assembly language which I found&hellip;",
            "content_html": "<h2>Introduction</h2>\n<p> The dsPIC33CH Curiosity Development Board (DM330028) has a built in buck-boost circuit that we can experiment with. Unfortunately in the time of this writing, the code for the buck-boost converter that is provided by Microchip is only written in assembly language which I found hard to comprehend. So I made my own program that is written in C language and using PID for the close loop control. Only voltage loop control is covered by this topic.</p>\n<h2>Buck-Boost Converter Circuit</h2>\n<p>Figure 1 below is the schematic of the buck boost circuit of the DSPIC33CH Curiosity Board. The DSPIC IC can control the boost transistor (Q2) switching through the RC15_S1PWM7L connection. The DSPIC IC should set low the RC14_S1PWM7H so that the Q6 P-MOSFET is always on (switch closed). </p>\n<figure class=\"post__image\" ><img loading=\"lazy\" src=\"https://andrewmosqueda.github.io/media/posts/4/BuckBoost_Power_Circuit.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-xs.png 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-sm.png 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-md.png 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-lg.png 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-xl.png 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-2xl.png 1600w\"  alt=\"DM330038 DSPIC33CH Curiosity Development Board Buck Boost Circuit\" width=\"970\" height=\"633\">\n<figcaption >Figure 1 DM330028 DSPIC33CH Curiosity Development Board Buck-Boost Converter Corcuit</figcaption>\n</figure>\n<p>The output of the converter (Vout) is sensed by the DSPIC IC through RC1_VOUTFB connection as shown in Figure 2. For a 12V output, the voltage that is sensed on RC1_VOUTFB is 12V*1kΩ/(4.7kΩ+1kΩ) = 2.105V. <strong>Make sure that J13 is not shorted on the board. </strong>Shorting J13 will increase the gain and make the sense voltage clip to 3.3V. Shorting J13 is useful for <a href=\"https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/\" target=\"_blank\" rel=\"noopener noreferrer\">buck operation</a>. I'll just let the circuit containing R70, R57, R65, R66 and Q7 as load. In my computation, the load will have a resistance of 3.7kΩ or a power consumption of 39mW.</p>\n<figure class=\"post__image\" ><img loading=\"lazy\" src=\"https://andrewmosqueda.github.io/media/posts/4/Buck_Sense_Circuit.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-xs.png 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-sm.png 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-md.png 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-lg.png 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-xl.png 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-2xl.png 1600w\"  alt=\"Figure 2 DM330028 DSPIC33CH Curiosity Development Board Buck-Boost Output Voltage Sense Circuit\" width=\"573\" height=\"332\">\n<figcaption >Figure 2 DM330028 DSPIC33CH Curiosity Development Board Buck-Boost Output Voltage Sense Circuit</figcaption>\n</figure>\n<h2>CORE SETUP</h2>\n<p>The PWM control pins in Figure 1 are connected to the Slave Core of the IC so we need to make the source code of the PWM control in the Slave Core project. We also need to make a simple source code for the Master Core project just to start the Slave Core.</p>\n<ol>\n<li>Run MPLAB X IDE (I'm using version v5.50 at the time of this writing). Connect J20 of the Curiosity board to the PC so that the MPLAB application detects what board is connected.</li>\n<li>After opening MPLAB, close any projects that are open on the left pane.</li>\n</ol>\n<p>MASTER CORE</p>\n<ol>\n<li>Ctrl+Shift+N to open the new project dialog box. Select Standalone Project then Click Next.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/new_project_dialog_box_MPLAB.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-2xl.jpg 1600w\"  alt=\"MPLAB New Project Choose Project dialog box\" width=\"898\" height=\"621\"></figure></li>\n<li>Select Device dsPIC33CH128MP508 and Tool Starter Kits (PKOB)-SN:BUR182571251 then click Next. Note, there is a DM330028-2 version of the curiousity board so the device and tool will be different. Please refer to its user guide or check the actual part number of the dsPIC IC that is mounted on the board.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_select_device.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-2xl.jpg 1600w\"  alt=\"MPLAB New Project Select Device Dialog\" width=\"897\" height=\"617\"></figure></li>\n<li>Select Compiler XC16 (v1.70) then click next. You may have a newer version installed.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_select_compiler.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-2xl.jpg 1600w\"  alt=\"MPLAB New Project Select Compiler Dialog\" width=\"898\" height=\"620\"></figure></li>\n<li>Name the project as \"master\". Save it to folder \"boost\" then click Finish.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-2xl.jpg 1600w\"  alt=\"MPLAB New Project Select Project Name and Folder Dialog Box\" width=\"951\" height=\"630\"></figure></li>\n</ol>\n<p>SLAVE CORE</p>\n<ol>\n<li>Ctrl+Shift+N to open again the new project dialog box. Select Standalone Project then click Next.</li>\n<li>Again, your curiosity may have a different device name but take note of the last two characters (\"S1\") for the device which means that it is the slave core. Select device dsPIC33CH128MO508S1 and Starter Kits (PKOB)-SN:BUR182571251 then click Next.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_select_device_slave.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-2xl.jpg 1600w\"  alt=\"MPLAB New Project Select Device dialog box\" width=\"895\" height=\"620\"></figure></li>\n<li>Select compiler XC16 (v1.70) then click next.</li>\n<li>Name the project as \"slave\" and use the same project location with the master core. Click Finish.</li>\n</ol>\n<h2>CODE CONFIGURATION</h2>\n<p>MASTER CORE</p>\n<ol>\n<li>On the Projects Pane, if the slave project is highlighted in bold, right click on master project and select \"Set as Main Project\".<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_Set_main_project.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-2xl.jpg 1600w\"  alt=\"MPLAB X IDE Set as Main Project menu\" width=\"412\" height=\"671\"></figure></li>\n<li>Click the MCC button on the toolbox. a master.mc3 file will be created in the root of the master project folder after MCC has finished loading.</li>\n<li>In the device resources pane, click the + on the SLAVE CORE.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_device_resources_slavecore.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-2xl.jpg 1600w\"  alt=\"MPLAB Device Resources Slave Core\" width=\"465\" height=\"292\"></figure><br>After clicking the + icon, wait until the SLAVE CORE appears on the project resources pane.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_project_resources_slavecore.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-2xl.jpg 1600w\"  alt=\"MPLAB Project Resources Slave Core\" width=\"467\" height=\"327\"></figure></li>\n<li>In the Slave Core Pane, name the Slave as \"slave\". Enable Protocol A and Protocol B. Set Protocol A Direction as M-&gt;S.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_slave_core_name.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-2xl.jpg 1600w\"  alt=\"MPLAB Master Settings Slave Name and Protocol Settings\" width=\"927\" height=\"517\"></figure></li>\n<li>In the Pin Manager Pane, set RC1, RC14 and RC15 as owned by the Slave Core. RC1 is the voltage sense input. RC14 and RC15 are the PWM pins for controlling the MOSFETS of the buck-boost circuit.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_pin_manager_master_slavepin_assign.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-2xl.jpg 1600w\"  alt=\"MPLAB MCC Pin Manager Slave Core Ownership\" width=\"1205\" height=\"351\"></figure></li>\n<li>In the System Module Pane, set clock output pin as \"OSC2 is general purpose digital I/O pin\".<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB-clock-output-pin-configuration.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-2xl.jpg 1600w\"  alt=\"MPLAB MCC Master Clock Output Pin Configuration\" width=\"918\" height=\"480\"></figure></li>\n<li>Go back to the Slave Core Pane and click Save Master Settings button. A file named master_config.mc3 will be generated on the root of the master folder after you click the Save Master Settings button.</li>\n<li>On the Project Resources pane, click the Generate button on the Project Resources pane. If there are warnings, review first the Notifications [MCC] pane.</li>\n<li>After confirmation on the generate configuration, you should see a Generation complete on the text output. After that, close the configurator by clicking the MCC button on the toolbar.</li>\n</ol>\n<p>SLAVE CORE</p>\n<ol>\n<li>On the Projects Pane, right click on the slave project and select Set as Main Project.</li>\n<li>Click the MCC button on the toolbar. This will generate a file named slave.mc3 to the root of the slave project folder.</li>\n<li>Go to the Master Core Pane then click Load Slave Settings from Master Configuration button.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/Load-Master-Settings.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-2xl.jpg 1600w\"  alt=\"MPLAB MCC Load Master Settings\" width=\"1087\" height=\"477\"></figure></li>\n<li>In the Load Master Settings dialog box, browse to the master core folder and open the master_config.mc3 file.</li>\n<li>In the Device Resources Pane, click the + on PWM. The PWM will appear on the Project Resources Pane afterwards.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_device_resources_PWM.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-2xl.jpg 1600w\"  alt=\"MPLAB MCC Device Resources Pane\" width=\"462\" height=\"292\"></figure></li>\n<li>In the PWM Pane, select PWM Generator 7, rename the Custom Name to PWM_BOOST, enable PWM Generator, change the PWM Operation Mode to Independent Edge, dual output and change PWM Output Mode to Independent. Note that we can only use Generator 7 because it is the one connected to RC14 and RC15 PWM output.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB-MCC-PWM-Generator-configuration-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-2xl.jpg 1600w\"  alt=\"MPLAB MCC PWM Generator Configuration\" width=\"738\" height=\"386\"></figure></li>\n<li>Change the Requested Frequency to 40KHz.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_PWM_frequency_setting.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-2xl.jpg 1600w\"  alt=\"MPLAB MCC PWM Generator Frequency configuration\" width=\"853\" height=\"287\"></figure><br>Below is the relationship of the Special Function Registers (SFR) to the Independent Edge dual output PWM generator from the dsPIC33/PIC24 FRM High-Resolution PWM with Fine Edge Placement document.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/dsPIC33_PIC24-dual-independent-PWM-SFR.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-2xl.jpg 1600w\"  alt=\"dsPIC33/PIC24 dual independent output PWM SFR\" width=\"350\" height=\"373\"></figure><br>Below table defines these SFRs and abbreviations according to my understanding.\n<table style=\"border-collapse: collapse; width: 101.459%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 20.2128%;\">Abbreviation</td>\n<td style=\"width: 81.4927%;\">Definition</td>\n</tr>\n<tr>\n<td style=\"width: 20.2128%;\">PGxPER</td>\n<td style=\"width: 81.4927%;\">PWM Generator x (generator number) Period . The PWM<br>counter counts from 0 up to the value of this SFR. This value is<br>calculated as the value on the \"PWM Input Clock Selection\"<br>(8MHz) divided by the value on \"Requested Frequency\"<br>(40kHz) less 1 and is equal to 199 (0xC7).</td>\n</tr>\n<tr>\n<td style=\"width: 20.2128%;\">PGxDC</td>\n<td style=\"width: 81.4927%;\">PWM Generator x (generator number) high side output Duty<br>Cycle. The PWM generator high side output changes to 0<br>when the timer value is equal to the value of this SFR.</td>\n</tr>\n<tr>\n<td style=\"width: 20.2128%;\">PGxPHASE</td>\n<td style=\"width: 81.4927%;\">PWM Generator x (generator number) high side output Phase<br>or deadtime. The PWM generator high side output  starts<br>from 0 when timer value is 0 and changes to 1 when the timer<br>value is equal to the value of this SFR. We actually don't need<br>to use this.</td>\n</tr>\n<tr>\n<td style=\"width: 20.2128%;\">PWMxH</td>\n<td style=\"width: 81.4927%;\">PWM Generator x (generator number) high side output. For<br>the dsPIC33 IC that we are using, this output is connected to<br>the RC14 pin (control for the buck MOSFET). PWMxH = 1 if<br>Timer&gt;= PGxPHASE &amp; Counter &lt;= PGxDC else 0.</td>\n</tr>\n<tr>\n<td style=\"width: 20.2128%;\">PGxTRIGB</td>\n<td style=\"width: 81.4927%;\">PWM Generator x (generator number) low side output Duty<br>Cycle. The PWM generator low side output changes to 0 when<br>the timer value is equal to the value of this SFR.</td>\n</tr>\n<tr>\n<td style=\"width: 20.2128%;\">PGxTRIGA</td>\n<td style=\"width: 81.4927%;\">PWM Generator x (generator number) low side output phase<br>or deadtime. The PWM generator low side output starts from<br>0 when timer value is 0 and changes to 1 when the timer value<br>is equal to the value of this SFR.</td>\n</tr>\n<tr>\n<td style=\"width: 20.2128%;\">PWMxL</td>\n<td style=\"width: 81.4927%;\">PWM Generator x (generator number) low side output. For the<br>dsPIC33 IC that we are using, this output is connected to the<br>RC15 pin (control for the boost MOSFET). PWMxL = 1 if Timer<br>&gt;= PGxTRIGA &amp; Counter &lt;= PGxTRIGB else 0.</td>\n</tr>\n</tbody>\n</table>\n The initialization of these SFRs will be automatically defined later on a pwm.c file generated by the MCC.</li>\n<li>Change the ADC Trigger 1 to Trigger A Compare and Trigger A Compare time to 1ns.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_PWM_ADCtrigger_setting.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-2xl.jpg 1600w\"  alt=\"MPLAB MCC PWM ADC Trigger Configuration\" width=\"523\" height=\"268\"></figure></li>\n<li>Change the Data Update Trigger to Duty Cycle.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_PWM_DataUpdate_setting.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-2xl.jpg 1600w\"  alt=\"MPLAB MCC PWM Update Trigger Configuration\" width=\"415\" height=\"133\"></figure><br>This setting means that the duty cycle of the generator (both H side and L side) will be updated every time PG7DC is updated.</li>\n<li>In the Device Resources pane, click + of the ADC1 to transfer the device to the Project Resources.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_device_resources_ADC.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-2xl.jpg 1600w\"  alt=\"MPLAB MCC Device Resources ADC1\" width=\"457\" height=\"286\"></figure></li>\n<li>In the ADC1 pane, enable Core1, change Core1 channel to S1ANA1 and Trigger Source to Slave PWM1 Trigger1. Tick the Interrupt Box.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_ADC_SelectedChannels_setting.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-2xl.jpg 1600w\"  alt=\"MPLAB MCC ADC Configuration\" width=\"860\" height=\"596\"></figure></li>\n<li>In the Pin Module Pane, change the name of RC1 to RC1_VOUTFB.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_Slave_Pin_Module.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-2xl.jpg 1600w\"  alt=\"MPLAB MCC Pin Module Configuration\" width=\"792\" height=\"263\"></figure></li>\n<li>Review the MCC Notifications. Usually I get the warnings like below.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_MCC_Notifications.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-2xl.jpg 1600w\"  alt=\"MPLAB MCC Slave notifications\" width=\"1151\" height=\"381\"></figure></li>\n<li>In the Project Resources pane, click Generate button. Click Yes to disregard the warnings and proceed generating the source files. Wait until a \"Generation complete\" text appears on the MPLAB Code Configurator prompt window.</li>\n<li>Close the code configurator by clicking the MCC toolbar button.</li>\n</ol>\n<p>SET THE SLAVE CORE AS SECONDARY PROJECT OF MASTER CORE</p>\n<ol>\n<li>Set master project as the main project.</li>\n<li>Right click on the Secondaries folder of master project and click Add Secondary Project...<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_add_secondary_project.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-2xl.jpg 1600w\"  alt=\"MPLAB Add Secondary Project\" width=\"387\" height=\"375\"></figure></li>\n<li>In the Add Secondary Project dialog window, select slave.X and click Add button.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_add_slavex.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-2xl.jpg 1600w\"  alt=\"MPLAB Add Secondary Project dialog \" width=\"807\" height=\"511\"></figure></li>\n<li>Right-click again on the Secondaries Folder and select Properties. Tick the Build box of the properties dialog window then click OK.</li>\n</ol>\n<h2>ACTUAL CODING</h2>\n<p>MASTER CORE SOURCE CODE</p>\n<ol>\n<li>Open the main.c file on the master project's \"Sources Files\" folder.</li>\n<li>Below the #include \"mcc_generated_files/system.h\", add the following codes:<br><code>#include \"mcc_generated_files/slave1.h\"<br> #include \"mcc_generated_files/pin_manager.h\"</code></li>\n<li>Below the SYSTEM_Initialize();, add the following codes:<br><code>SLAVE1_Program(); <br>SLAVE1_Start();</code><br>At the time of this writing, SLAVE1_Program() and SLAVE1_Start() functions are deprecated so I would expect I will need a replacement for these functions in the future.</li>\n<li>Below should be how the master core main.c would look like:<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_master_code.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-2xl.jpg 1600w\"  alt=\"MPLAB Master Core Source Code\" width=\"507\" height=\"561\"></figure></li>\n<li>Close the main.c file of the master core. Click Save when asked.</li>\n</ol>\n<p>SLAVE CORE SOURCE CODE</p>\n<ol>\n<li>Open the main.c file on the slave project's Source Files folder.</li>\n<li>Below the #include \"mcc_generated_files/system.h\", add the following codes:<br><code>#include \"mcc_generated_files/pin_manager.h\" <br>#include \"mcc_generated_files/pwm.h\" <br>#include \"mcc_generated_files/adc1.h\" <br><br>/*PID function and variable definitions*/ <br>void PID(void); <br>int16_t n16_integrator_memory; <br>int16_t n16_reference; <br>int16_t n16_error; <br>int16_t n16_proportional;<br>int16_t n16_sum;<br>int16_t n16_limit; <br><br>#define target_voltage 12 <br>#define reference 200*target_voltage + 230 <br>#define p_gain 0.1 <br>#define i_gain 0.05</code><br>The p_gain and i_gain values are the parameters that you can adjust to fine tune the gain loop response of the boost converter. You can also fine tune the offset of the reference to get an exact 12V output.</li>\n<li>Inside the int main(void), add the following codes after SYSTEM_Initialize();<br><code>// Initialize PWM to 0% duty cycle (The boost Q2 is NMOS, 1=on) <br>PG7TRIGB = 0; <br>// Duty cycle limit (ensure boost MOSFET doesn't short) <br>n16_limit = (int16_t)(PG7PER-10); <br>//Initialize PID variables <br>n16_integrator_memory = 0; <br>n16_reference = (int16_t) reference; <br>//Assign PID Handler <br>ADC1_SetRC1_VOUTFBInterruptHandler(PID);</code></li>\n<li>After the int_main(void) function, add the following code:<br><code>void PID(void) <br>{<br>  n16_error = n16_reference - ADCBUF1;<br>  n16_integrator_memory = n16_integrator_memory + i_gain*n16_error; <br>  n16_proportional = p_gain*n16_error;<br>  n16_sum = n16_integrator_memory + n16_proportional;<br>  if (n16_sum &gt; n16_limit) {n16_sum = n16_limit;} <br>  if (n16_sum &lt; 0) {n16_sum = 0;} <br>  PG7TRIGB = n16_sum; <br>  PG7DC = 0; // Need this to update PG7TRIGB<br> }</code></li>\n<li>The new main.c of the slave core should now look like below:<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/DSPIC33-boost-converter-source-code-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-2xl.jpg 1600w\"  alt=\"MPLAB DSPIC33CH Boost Converter Source Code\" width=\"611\" height=\"922\"></figure></li>\n</ol>\n<h2>RESULT</h2>\n<ol>\n<li>Be sure to set the master project as the main project.</li>\n<li>Be sure that the Curiosity board is connected to the PC.</li>\n<li>Click the program button on the toolbar<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_program_button.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-2xl.jpg 1600w\"  alt=\"MPLAB program button\" width=\"56\" height=\"40\"></figure>. Wait until the \"Programming/Verify complete\" is prompted on the Starter Kit on Board Pane.<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/MPLAB_programming_complete.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-2xl.jpg 1600w\"  alt=\"MPLAB Starter Kit on Board\" width=\"623\" height=\"336\"></figure></li>\n<li>Below is my hardware setup to validate the result. I use ADALM2000 as oscilloscope.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/DM330028-with-ADALM2000.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-2xl.jpg 1600w\"  alt=\"DM330028 dsPIC33CH Curiosity with ADALM2000\" width=\"733\" height=\"533\"></figure></li>\n<li>Below is the waveform taken from the ADALM2000 oscilloscope.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/4/ADALM2000-oscilloscope.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-2xl.jpg 1600w\"  alt=\"ADALM2000 oscilloscope\" width=\"1311\" height=\"718\"></figure></li>\n</ol>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Andrew Mosqueda"
            },
            "tags": [
            ],
            "date_published": "2021-08-17T20:18:47+08:00",
            "date_modified": "2021-09-30T19:55:35+08:00"
        },
        {
            "id": "https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/",
            "url": "https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/",
            "title": "Implementing 5V to 3.3V PWM Buck Converter in the DSPIC33CH Curiosity Development Board",
            "summary": "Introduction The dsPIC33CH Curiosity Development Board (DM330028) has a built in buck-boost circuit that we can experiment with. Unfortunately in the time of this writing, the code for the buck-boost converter that is provided by Microchip is only written in assembly language which I found&hellip;",
            "content_html": "<h2>Introduction</h2>\n<p>The dsPIC33CH Curiosity Development Board (DM330028) has a built in buck-boost circuit that we can experiment with. Unfortunately in the time of this writing, the code for the buck-boost converter that is provided by Microchip is only written in assembly language which I found hard to comprehend. So I made my own program that is written in C language and using PID for the close loop control. Only voltage loop control is covered by this topic.  </p>\n<h2>Buck-Boost Converter Circuit</h2>\n<p>Figure 1 below is the schematic of the buck boost circuit of the DSPIC33CH Curiosity Board. The DSPIC IC can control the buck transistor (Q6) switching through the RC14_S1PWM7H connection. Q6 is a PMOS so it needs a logic 0 (Active-low) to turn it on. The output of the converter (Vout) is sensed by the DSPIC IC through RC1_VOUTFB connection as shown in Figure 2. <strong>Make sure that J13 is shorted on the board</strong>. Removing the short on J13 will decrease the gain, make the sense voltage small and will have low resolution in the ADC. Removing the short on J13 is useful for boost operation because a higher output voltage will need a lower gain sense resistors. I am connecting a 91Ω resistor as load. For a 3.3V output, the power that will be drawn by the resistor is 3.3V*3.3V/91Ω = 120 milliwatt. RC15_S1PWM7L should be set to low all the time so that the boost transistor (Q2) is always open. </p>\n<figure class=\"post__image\" ><br><img loading=\"lazy\" src=\"https://andrewmosqueda.github.io/media/posts/3/Buck_Power_Circuit.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-xs.png 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-sm.png 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-md.png 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-lg.png 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-xl.png 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-2xl.png 1600w\"  alt=\"DM330028 Buck Converter Power Circuit\" width=\"970\" height=\"633\">\n<figcaption >Figure 1 DSPIC33CH Curiosity Board Development Board Buck-Boost Converter Circuit</figcaption>\n</figure>\n<figure class=\"post__image\" ><br><img loading=\"lazy\" src=\"https://andrewmosqueda.github.io/media/posts/3/Buck_Sense_Circuit-2.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-xs.png 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-sm.png 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-md.png 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-lg.png 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-xl.png 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-2xl.png 1600w\"  alt=\"DM330028 Buck-Boost Output Sense Circuit\" width=\"573\" height=\"332\">\n<figcaption >Figure 2 DSPIC33CH Curiosity Development Board Buck-Boost Output Voltage Sense Circuit</figcaption>\n</figure>\n<h2>CORE SETUP</h2>\n<p>The PWM control pins in Figure 1 are connected to the Slave Core of the IC so we need to make the source code of the PWM control in the Slave Core. We also need to make a simple source code for the Master Core just to start the Slave Core.</p>\n<ol>\n<li>Run MPLAB X IDE (I'm using vrsion v5.50 at the time of this writing). Connect J20 of the Curiosity board to your PC so that the MPLAB application detects what board is connected.</li>\n<li>After opening MPLAB, close any projects that are open on the left pane.</li>\n</ol>\n<p>MASTER CORE</p>\n<ol>\n<li>Ctrl+Shift+N to open the new project dialog box. Select Standalone Project then Click Next.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/new_project_dialog_box_MPLAB-3.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-2xl.jpg 1600w\"  alt=\"MPLAB New Project Dialog Box\" width=\"898\" height=\"621\"></figure></li>\n<li>Select Device dsPIC33CH128MP508 and Tool Starter Kits (PKOB)-SN:BUR182571251 then click Next. Note, there is a DM330028-2 version of the Curiosity board so the device and tool will be different. Please refer to its user guide or check the actual part number of the dsPIC IC that is mounted on the board.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_select_device.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-2xl.jpg 1600w\"  alt=\"MPLAB select device\" width=\"897\" height=\"617\"></figure></li>\n<li>Select Compiler XC16 (v1.70) then click next. You may have a newer version installed.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_select_compiler-3.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-2xl.jpg 1600w\"  alt=\"MPLAB Select Compiler\" width=\"898\" height=\"620\"></figure></li>\n<li>Name the project as \"master\". I save it to folder \"buck\" then click Finish.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_project_name_and_folder-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-2xl.jpg 1600w\"  alt=\"MPLAB Project name and folder\" width=\"947\" height=\"622\"></figure></li>\n</ol>\n<p>SLAVE CORE</p>\n<ol>\n<li>Ctrl+Shift+N to open again the new project dialog box. Select Standalone Project then click Next.</li>\n<li>Again, your Curiosity board may have a different device name but take note of the last two characters (\"S1\") for the device which means that it is the slave core. Select device dsPIC33CH128MO508S1 and Starter Kits (PKOB)-SN:BUR182571251 then click Next. <br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_select_device_slave.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-2xl.jpg 1600w\"  alt=\"MPLAB select device slave\" width=\"895\" height=\"620\"></figure></li>\n<li>Select compiler XC16 (v1.70) then click next.</li>\n<li>Name the project as \"slave\" and use the same project location with the master core. Click Finish.</li>\n</ol>\n<h2>CODE CONFIGURATION</h2>\n<p>MASTER CORE</p>\n<ol>\n<li>On the Projects Pane, right click on master and select \"Set as Main Project\".<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_Set_main_project.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-2xl.jpg 1600w\"  alt=\"MPLAB set as main project\" width=\"412\" height=\"671\"></figure></li>\n<li>Click the MCC button on the toolbox. master.mc3 file will be created in the root of the master project folder (..\\master.x\\master.mc3).</li>\n<li>In the device resources pane, click the + on the SLAVE CORE.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_device_resources_slavecore-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-2xl.jpg 1600w\"  alt=\"MPLAB Device Resources Select Slave Core\" width=\"465\" height=\"292\"></figure><br>After clicking it, the SLAVE CORE should appear on the project resources pane.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_project_resources_slavecore.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-2xl.jpg 1600w\"  alt=\"MPLAB project resources slave core\" width=\"467\" height=\"327\"></figure></li>\n<li>In the Slave Core Pane, name the Slave as \"slave\". Enable Protocol A and Protocol B. Set Protocol A Direction as M-&gt;S.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_slave_core_name-3.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-2xl.jpg 1600w\"  alt=\"MPLAB slave core name\" width=\"927\" height=\"517\"></figure></li>\n<li>In the Pin Manager Pane, set RC1, RC14 and RC15 as owned by the Slave Core. RC1 is the voltage feedback input. RC14 and RC15 are the PWM pins for controlling the MOSFETs of the buck-boost circuit,<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_pin_manager_master_slavepin_assign.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-2xl.jpg 1600w\"  alt=\"MPLAB Master Pin Manager Slave Pin Assignment\" width=\"1205\" height=\"351\"></figure></li>\n<li>In the System Module Pane, set clock output pin as \"OSC2 is general purpose digital I/O pin\". <br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB-clock-output-pin-configuration.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-2xl.jpg 1600w\"  alt=\"MPLAB clock output pin configuration\" width=\"918\" height=\"480\"></figure></li>\n<li>Go back to the Slave Core Pane and click Save Master Settings button. A file named master_config.mc3 will be generated on the root of the master folder after you click the Save Master Settings button.</li>\n<li>Lastly for the master configuration, click the Generate button on the Project Resources pane. If there are warnings, review first the Notifications [MCC] pane. </li>\n<li>After confirmation on the generate configuration, you should see a Generation complete on the text output. After that, close the configurator by clicking the MCC toolbar button.</li>\n</ol>\n<p>SLAVE CORE</p>\n<ol>\n<li>On the Projects Pane, right click on the slave project and select Set as Main Project.</li>\n<li>Click the MCC button on the toolbox. This will generate a file named slave.mc3 to the root of the slave project folder (..\\slave.x\\slave.mc3).</li>\n<li>Go to the Master Core Pane then click Load Slave Settings from Master Configuration button.</li>\n<li>In the Load Master Settings dialog box, browse to the master core folder and open the master_config.mc3 file. </li>\n<li>In the Device Resources Pane, click the + on PWM. The PWM will appear on the Project Resources Pane afterwards.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_device_resources_PWM.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-2xl.jpg 1600w\"  alt=\"MPLAB device resources PWM\" width=\"462\" height=\"292\"></figure></li>\n<li>In the PWM Pane, Select PWM Generator 7, rename to PWM_BUCK, enable PWM Generator and change PWM Output Mode to Independent. Note that we can only use Generator 7 because it is the one connected to RC14 and RC15 PWM output.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_PWM_generator_setting-3.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-2xl.jpg 1600w\"  alt=\"MPLAB PWM Generator Settings\" width=\"927\" height=\"295\"></figure></li>\n<li>Change the Requested Frequency to 40KHz.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_PWM_frequency_setting.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-2xl.jpg 1600w\"  alt=\"MPLAB PWM frequency setting\" width=\"853\" height=\"287\"></figure><br>Below is the relationship of the Special Function Registers (SFR) to the Independent Edge PWM generator from the dsPIC33/PIC24 FRM High-Resolution PWM with Fine Edge Placement document.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/dsPIC33_PIC24-Independent-Edge-PWM-SFR.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-2xl.jpg 1600w\"  alt=\"dsPIC33_PIC24 Independent Edge PWM Special Function Register (FSR)\" width=\"372\" height=\"272\"></figure><br>Below table defines these SFRs and abbreviations according to my understanding.<br>\n<table style=\"border-collapse: collapse; width: 105.597%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 23.8602%;\">Abbreviation</td>\n<td style=\"width: 81.8165%;\">Definition</td>\n</tr>\n<tr>\n<td style=\"width: 23.8602%;\">SOC</td>\n<td style=\"width: 81.8165%;\">Start Of Counter</td>\n</tr>\n<tr>\n<td style=\"width: 23.8602%;\">EOC</td>\n<td style=\"width: 81.8165%;\">End Of Counter</td>\n</tr>\n<tr>\n<td style=\"width: 23.8602%;\">PGxPER</td>\n<td style=\"width: 81.8165%;\">PWM Generator x (generator number) Period. The PWM<br>counter counts from 0 up to the value of this SFR. This value is<br>calculated as the value on \"PWM Input Clock Selection\"<br>(8MHz) divided by the value on \"Requested Frequency\"<br>(40kHz) less 1 and is equal to 199 (0xC7).</td>\n</tr>\n<tr>\n<td style=\"width: 23.8602%;\">PGxDC</td>\n<td style=\"width: 81.8165%;\">PWM Generator x (generator number) Duty Cycle. The PWM<br>generator output changes to 0 when the counter is equal to<br>the value of this SFR. </td>\n</tr>\n<tr>\n<td style=\"width: 23.8602%;\">PGxPHASE</td>\n<td style=\"width: 81.8165%;\">PWM Generator x (generator number) Phase or deadtime.<br>The output of the PWM generator starts from 0 when counter<br>value is 0 and changes to 1 when the counter value is equal to<br>the value of this SFR.</td>\n</tr>\n<tr>\n<td style=\"width: 23.8602%;\">PWMx</td>\n<td style=\"width: 81.8165%;\">Pulse Width Modulation x (generator number) output. PWMx<br>= 1 if Counter&gt;=PGxPHASE &amp; Counter &lt;= PGxDC else 0. For<br>the dsPIC33 IC that we are using, this output is connected to<br>the RC14 pin.</td>\n</tr>\n</tbody>\n</table>\nThe initialization of these SFRs will be automatically defined later on a pwm.c file generated by the MCC. </li>\n<li>Change the ADC Trigger 1 to Trigger A Compare and Trigger A Compare time to 1ns.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_PWM_ADCtrigger_setting.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-2xl.jpg 1600w\"  alt=\"MPLAB PWM ADC Trigger Setting\" width=\"523\" height=\"268\"></figure></li>\n<li>Change the Data Update Trigger to Duty Cycle.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_PWM_DataUpdate_setting.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-2xl.jpg 1600w\"  alt=\"MPLAB PWM Data Update Settings\" width=\"415\" height=\"133\"></figure></li>\n<li>In the Registers tab of the PWM pane, change the POLH to Active-low.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/PG7IOCONH.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/PG7IOCONH-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/PG7IOCONH-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/PG7IOCONH-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/PG7IOCONH-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/PG7IOCONH-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/PG7IOCONH-2xl.jpg 1600w\"  alt=\"MPLAB MCC Active low PWM\" width=\"307\" height=\"312\"></figure></li>\n<li>In the Device Resources pane, click + of the ADC1 to transfer the device to the Project Resources.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_device_resources_ADC.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-2xl.jpg 1600w\"  alt=\"MPLAB Device Resources ADC\" width=\"457\" height=\"286\"></figure></li>\n<li>In the ADC1 pane, enable Core1, change  Core1 channel to S1ANA1 and Trigger Source to Slave PWM1 Trigger1. Tick the Interrupt Box.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_ADC_SelectedChannels_setting-3.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-2xl.jpg 1600w\"  alt=\"MPLAB ADC Selected Channels Setting\" width=\"860\" height=\"596\"></figure></li>\n<li>In the Pin Module Pane, change the name of RC1 to RC1_VOUTFB.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_Slave_Pin_Module.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-2xl.jpg 1600w\"  alt=\"MPLAB Slave Pin Module Setting\" width=\"792\" height=\"263\"></figure></li>\n<li>Review the MCC Notifications. Usually I get the warnings like below.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_MCC_Notifications-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-2xl.jpg 1600w\"  alt=\"MPLAB MCC notification\" width=\"1151\" height=\"381\"></figure></li>\n<li>In the Project Resources pane, click Generate button. Click Yes to disregard the warnings and proceed generating the source files. Wait until a \"Generation complete\" text appears on the MPLAB Code Configurator prompt window.</li>\n<li>Close the code configurator by clicking the MCC toolbar button.</li>\n</ol>\n<p>SET THE SLAVE CORE AS SECONDARY PROJECT OF MASTER CORE</p>\n<ol>\n<li>Set master project as the main project.</li>\n<li>Right click on the Secondaries folder of master project and click Add Secondary  Project...<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_add_secondary_project.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-2xl.jpg 1600w\"  alt=\"MPLAB Add Secondary project to master\" width=\"387\" height=\"375\"></figure></li>\n<li>In the Add Secondary Project dialog window, select slave.X and click Add button.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_add_slavex.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-2xl.jpg 1600w\"  alt=\"MPLAB Add slave to master\" width=\"807\" height=\"511\"></figure></li>\n<li>Right-click again on the Secondaries Folder and select Properties. Tick the Build box of the properties dialog window then click OK.</li>\n</ol>\n<h2>ACTUAL CODING</h2>\n<p>MASTER CORE SOURCE CODE</p>\n<ol>\n<li>Open the main.c file on the master project's \"Source Files\" folder.</li>\n<li>Below the #include \"mcc_generated_files/system.h\", add the following codes:<code><br>#include \"mcc_generated_files/slave1.h\" <br>#include \"mcc_generated_files/pin_manager.h\"</code></li>\n<li>Below the SYSTEM_Initialize();, add the following codes:<code><br>SLAVE1_Program();<br>SLAVE1_Start();</code></li>\n<li>Below should be how the master core main.c would look like:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_master_code.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-2xl.jpg 1600w\"  alt=\"MPLAB master source\" width=\"507\" height=\"561\"></figure></li>\n<li>Close the main.c file of the master core. Click Save when asked.</li>\n</ol>\n<p>SLAVE CORE SOURCE CODE</p>\n<ol>\n<li>Open the main.c file on the slave project's Source Files folder.</li>\n<li>Below the #include \"mcc_generated_files/system.h\", add the following codes:<code><br>#include \"mcc_generated_files/pin_manager.h\"<br>#include \"mcc_generated_files/pwm.h\"<br>#include \"mcc_generated_files/adc1.h\"<br><br>/*PID function and variable definitions*/<br>void PID(void);<br>volatile int16_t n16_integrator_memory;<br>volatile int16_t n16_reference;<br>int16_t n16_error;<br>int16_t n16_proportional;<br><br>#define target_voltage  3.3<br>#define reference       666.7*target_voltage + 17.6<br>#define p_gain          0.1<br>#define i_gain          0.05</code><br>The p_gain and i_gain values are the parameters that you can adjust to fine tune the gain loop response of the buck converter.</li>\n<li>Inside the int main(void), add the following codes after SYSTEM_Initialize();<code><br>//Initialize PID variables<br>n16_integrator_memory = 0;<br>n16_reference = (int16_t) reference;<br>//Assign PID Handler<br> ADC1_SetRC1_VOUTFBInterruptHandler(PID);</code></li>\n<li>After the int main(void) function, add the following code:<code><br>void PID(void)<br>{<br>  n16_error = n16_reference - ADCBUF1;<br>  n16_integrator_memory = n16_integrator_memory + i_gain*n16_error;<br>  n16_proportional = p_gain*n16_error;<br>  PG7DC = n16_integrator_memory + n16_proportional;<br>}</code></li>\n<li>The new main.c of the slave core should now look like below:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_slave_code-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-2-2xl.jpg 1600w\"  alt=\"MPLAB PID Code\" width=\"578\" height=\"742\"></figure></li>\n</ol>\n<h2>RESULT<br><br></h2>\n<ol>\n<li>Be sure to set the master project as the main project.</li>\n<li>Be sure that the Curiosity board is connected to the PC. Make sure that J13 is shorted on the board.</li>\n<li>Click the program button on the toolbar. <figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_program_button.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-2xl.jpg 1600w\"  alt=\"MPLAB Program Button\" width=\"56\" height=\"40\"></figure> Wait until the \"Programming/Verify complete\" is prompted on the Starter Kit on Board Pane.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/MPLAB_programming_complete.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-2xl.jpg 1600w\"  alt=\"MPLAB Programming Complete\" width=\"623\" height=\"336\"></figure></li>\n<li>Below is my hardware setup to validate the result. I use ADALM2000 as oscilloscope.<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/DSPIC33CH_hardware_setup-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-2xl.jpg 1600w\"  alt=\"DM330028 dsPIC33CH Buck Converter with ADALM2000 oscilloscope\" width=\"1082\" height=\"728\"></figure></li>\n<li>Below is the waveform taken from the ADALM2000 oscilloscope:<br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/3/DSPIC33CH-buck-waveform-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-2xl.jpg 1600w\"  alt=\"Scopy Oscilloscope\" width=\"1223\" height=\"678\"></figure>The mean of the output voltage is 3.22V, a little offset from the 3.3V target. It could be due to the tolerance of the sense resistors, opamp or ADC of the DSPIC IC. The reference in the source code can ba adjusted to compensate this offset. We can also see that the duty measured is 20.03%.</li>\n</ol>",
            "author": {
                "name": "Andrew Mosqueda"
            },
            "tags": [
            ],
            "date_published": "2021-08-08T16:12:43+08:00",
            "date_modified": "2021-09-29T21:43:37+08:00"
        },
        {
            "id": "https://andrewmosqueda.github.io/simulation-of-buck-converter-using-discrete-pid-in-ltspice/",
            "url": "https://andrewmosqueda.github.io/simulation-of-buck-converter-using-discrete-pid-in-ltspice/",
            "title": "Simulation of Buck Converter using discrete PID in LTSPICE",
            "summary": "If you are in a hurry and want to immediately verify the simulation, download and unzipped the file below then run the buck.asc file in LTSPICE: Discrete PWM buck converter This article presents a LTSPICE simulation of a PWM buck converter controlled by a discrete&hellip;",
            "content_html": "<p>If you are in a hurry and want to immediately verify the simulation, download and unzipped the file below then run the buck.asc file in LTSPICE:</p>\n<p><a href=\"https://andrewmosqueda.github.io/media/files/discrete_buck_converter.zip\" target=\"_blank\" rel=\"noopener noreferrer\">Discrete PWM buck converter</a></p>\n<figure class=\"post__image\">Below left is the schematic on the buck.asc file and below right should be the result of the LTSPICE simulation.<br><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/2/discrete_buck_pwm.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-2xl.jpg 1600w\"  alt=\"LTSPICE Digital PWM Buck Converter\" width=\"1916\" height=\"922\"></figure>\n<h2>Introduction</h2>\n<p>This article presents a LTSPICE simulation of a PWM buck converter controlled by a discrete PID. The simulation result will be compared to the result of the actual implementation of a digitally controlled buck converter (<a href=\"https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/\" target=\"_blank\" rel=\"noopener noreferrer\">Buck converter</a>). Below table is a comparison of the source code from the the actual implementation (DSPIC33 IC) and the components used in this LTSPICE simulation.</p>\n<table style=\"border-collapse: collapse; width: 98.8593%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 49.2311%;\"><strong>MPLAB (DSPIC33) Source Code</strong></td>\n<td style=\"width: 56.8252%;\"><strong>LTSPICE component / parameter</strong></td>\n</tr>\n<tr>\n<td style=\"width: 49.2311%;\">\n<p><span style=\"text-decoration: underline;\">PARAMETERS</span></p>\n<p><span style=\"font-size: small;\">#define target_voltage  3.3<br>#define reference       666.7*target_voltage + 17.6<br>#define p_gain          0.1<br>#define i_gain          0.05</span></p>\n</td>\n<td style=\"width: 56.8252%;\">\n<p><span style=\"text-decoration: underline;\">PARAMETERS</span></p>\n<p><span style=\"font-size: small;\">.param target_voltage=3.3 p_gain=0.1 i_gain=0.05<br>.param reference=(666.7*target_voltage)+17.6</span></p>\n</td>\n</tr>\n<tr>\n<td style=\"width: 49.2311%;\">\n<p><span style=\"text-decoration: underline;\">ANALOG TO DIGITAL CONVERSION</span></p>\n<p><span style=\"font-size: small;\">(use the default configuration of ADC)</span></p>\n</td>\n<td style=\"width: 56.8252%;\">\n<p><span style=\"text-decoration: underline;\">ANALOG TO DISCRETE CONVERSION</span></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/2/ADC.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-2xl.jpg 1600w\"  alt=\"LTSPICE Analog to Digital Conversion\" width=\"602\" height=\"57\"></figure>\n</td>\n</tr>\n<tr>\n<td style=\"width: 49.2311%;\">\n<p><span style=\"text-decoration: underline;\">ERROR CALCULATION</span></p>\n<p><span style=\"font-size: small;\">n16_error = n16_reference - ADCBUF1;</span></p>\n</td>\n<td style=\"width: 56.8252%;\">\n<p><span style=\"text-decoration: underline;\">ERROR CALCULATION</span></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/2/LTSPICE_error_calculation.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-2xl.jpg 1600w\"  alt=\"LTSPICE Error calculation\" width=\"602\" height=\"57\"></figure>\n</td>\n</tr>\n<tr>\n<td style=\"width: 49.2311%;\">\n<p><span style=\"text-decoration: underline;\">INTEGRATION</span></p>\n<p><span style=\"font-size: small;\">n16_integrator_memory = n16_integrator_memory + <br> i_gain*n16_error;</span></p>\n</td>\n<td style=\"width: 56.8252%;\">\n<p><span style=\"text-decoration: underline;\">INTEGRATION</span></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/2/LTSPICE_integration.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-2xl.jpg 1600w\"  alt=\"LTSPICE Discrete Integrator\" width=\"601\" height=\"127\"></figure>\n</td>\n</tr>\n<tr>\n<td style=\"width: 49.2311%;\">\n<p><span style=\"text-decoration: underline;\">PROPORTIONAL</span></p>\n<p><span style=\"font-size: small;\">n16_proportional = p_gain*n16_error;</span></p>\n</td>\n<td style=\"width: 56.8252%;\">\n<p><span style=\"text-decoration: underline;\">PROPORTIONAL</span></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/2/LTSPICE_proportional.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-2xl.jpg 1600w\"  alt=\"LTSPICE proportional computation\" width=\"602\" height=\"53\"></figure>\n</td>\n</tr>\n<tr>\n<td style=\"width: 49.2311%;\">\n<p><span style=\"text-decoration: underline;\">DUTY CYCLE</span></p>\n<p><span style=\"font-size: small;\">PG7DC = PG7PER - n16_integrator_memory <br> - n16_proportional;</span></p>\n</td>\n<td style=\"width: 56.8252%;\">\n<p><span style=\"text-decoration: underline;\">DUTY CYCLE</span></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/2/LTSPICE_duty_cycle.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-2xl.jpg 1600w\"  alt=\"LTSPICE Duty Cycle\" width=\"603\" height=\"55\"></figure>\n</td>\n</tr>\n<tr>\n<td style=\"width: 49.2311%;\">\n<p><span style=\"text-decoration: underline;\">PWM GENERATION</span></p>\n<p><span style=\"font-size: small;\">Configured in MCC PWM7, pwm freq=40kHz,<br>master clock frequency=8MHz</span></p>\n</td>\n<td style=\"width: 56.8252%;\">\n<p><span style=\"text-decoration: underline;\">PWM GENERATION</span></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/2/LTSPICE_pwm_setting.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-2xl.jpg 1600w\"  alt=\"LTSPICE PWM Setting\" width=\"400\" height=\"47\"></figure><br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/2/LTSPICE_pwm_generator.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-2xl.jpg 1600w\"  alt=\"LTSPICE PWM Generator\" width=\"712\" height=\"123\"></figure>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Note: I used the floor() function in LTSPICE to convert the values into discrete.</p>\n<p> </p>\n<h2>Result</h2>\n<p>Below is the resulting waveform from 9.68ms to 10ms of the simulation. We can see that the on time width measured is 3.34ms which is only 16.5% duty cycle. </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/2/ltspice_pwm_waveform.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-2xl.jpg 1600w\"  alt=\"LTSPICE PWM waveform\" width=\"943\" height=\"603\"></figure>\n<p>In the <a href=\"https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/\" target=\"_blank\" rel=\"noopener noreferrer\">actual</a> implementation, the duty cycle measured by the oscilloscope was 20%. Most likely cause why the actual implementation has higher duty cycle is that the MOSFET used in the actual implementation has a higher turn on resistance (BSS308PE Rdson=130mΩ@4.5V). The MOSFET (IRF7210) I used in the LTSPICE simulation has a Rdson of only 5mΩ. I changed the MOSFET to part number FDC5614P which has a Rdson value of  105mΩ and run the simulation again, the result below is now similar to the actual implementation.</p>\n<figure class=\"post__image\" ><img loading=\"lazy\" src=\"https://andrewmosqueda.github.io/media/posts/2/ltspice_pwm_waveform2-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-2xl.jpg 1600w\"  alt=\"LTSPICE PWM Buck Converter waveform\" width=\"942\" height=\"598\">\n<figcaption >PWM on pulse width increased with higher Rdson</figcaption>\n</figure>\n<h2>Conclusion</h2>\n<p>It was demonstrated that discrete control of PWM can be simulated in LTSPICE that can generate similar result with an actual implementation. It is better if we use the right part model. For example, the Rdson has a significant impact on the duty cycle.</p>",
            "author": {
                "name": "Andrew Mosqueda"
            },
            "tags": [
            ],
            "date_published": "2021-08-08T11:14:19+08:00",
            "date_modified": "2021-09-26T09:22:31+08:00"
        },
        {
            "id": "https://andrewmosqueda.github.io/implementing-a-discrete-integrator-in-ltspice/",
            "url": "https://andrewmosqueda.github.io/implementing-a-discrete-integrator-in-ltspice/",
            "title": "How to implement a discrete integrator in LTSPICE",
            "summary": "If you are in a hurry and want to immediately verify its function, download and unzipped the file below then run the TestBench.asc file in LTSPICE: integrator.zip Below left is the schematic on the TestBench.asc file and below right side should be the result of&hellip;",
            "content_html": "<p>If you are in a hurry and want to immediately verify its function, download and unzipped the file below then run the TestBench.asc file in LTSPICE: </p>\n<p><a href=\"https://andrewmosqueda.github.io/media/files/Integrator.zip\" target=\"_blank\" rel=\"noopener noreferrer\">integrator.zip</a></p>\n<p>Below left is the schematic on the TestBench.asc file and below right side should be the result of the simulation.</p>\n<h2><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/1/integrator_bench.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-2xl.jpg 1600w\"  alt=\"LTSPICE integrator\" width=\"1915\" height=\"883\"></figure></h2>\n<h2> </h2>\n<h2>How to use the integrator in another LTSPICE schematic file:</h2>\n<ol>\n<li>Copy the integrator.net and integrator.asy files to the folder where your LTSPICE schematic is saved.</li>\n<li>In the LTSPICE schematic window, press F2 to display the \"Select Component Symbol\" dialog box.</li>\n<li>In the \"Select Component Symbol\" dialog box. 1st, select the folder where your LTSPICE schematic is saved. 2nd, select the \"integrator\" from the list then click the OK button.\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"https://andrewmosqueda.github.io/media/posts/1/select_component_dialog.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-2xl.jpg 1600w\"  alt=\"\" width=\"567\" height=\"542\">\n<figcaption >Select Component Symbol</figcaption>\n</figure>\n</li>\n<li>Lastly, click anywhere in the schematic to place the integrator component.</li>\n</ol>\n<p> </p>\n<h2>Pin Definition</h2>\n<table style=\"border-collapse: collapse; width: 130%; height: 450px;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 13.7669%;\">PIN NAME</td>\n<td style=\"width: 9.62921%;\">TYPE</td>\n<td style=\"width: 54.9502%;\">DEFINITION</td>\n</tr>\n<tr>\n<td style=\"width: 13.7669%;\">IN</td>\n<td style=\"width: 9.62921%;\">Input</td>\n<td style=\"width: 54.9502%;\">The voltage value at this pin is rounded to the nearest integer and then added to the voltage of the OUT pin during positive transition of the CLK pin.</td>\n</tr>\n<tr>\n<td style=\"width: 13.7669%;\">CLK</td>\n<td style=\"width: 9.62921%;\">Input</td>\n<td style=\"width: 54.9502%;\">Integration is executed during positive transition of the voltage on this pin. HIGH&gt;0.5V.  LOW&lt;0.5V</td>\n</tr>\n<tr>\n<td style=\"width: 13.7669%;\">RST</td>\n<td style=\"width: 9.62921%;\">Input</td>\n<td style=\"width: 54.9502%;\">The OUT pin is set to the rounded value of the voltage at the IVAL pin when RST pin is HIGH. HIGH&gt;0.5V. LOW&lt;0.5V</td>\n</tr>\n<tr>\n<td style=\"width: 13.7669%;\">IVAL</td>\n<td style=\"width: 9.62921%;\">Input</td>\n<td style=\"width: 54.9502%;\">The voltage value at this pin is rounded to the nearest integer and then transferred to the OUT pin when RST pin is HIGH.</td>\n</tr>\n<tr>\n<td style=\"width: 13.7669%;\">OUT</td>\n<td style=\"width: 9.62921%;\">Output</td>\n<td style=\"width: 54.9502%;\">This pin outputs the integrated value.</td>\n</tr>\n<tr>\n<td style=\"width: 13.7669%;\">DEBUG</td>\n<td style=\"width: 9.62921%;\">Output</td>\n<td style=\"width: 54.9502%;\">Reserved for debugging the integrator.</td>\n</tr>\n</tbody>\n</table>\n<h2> </h2>\n<h2>Introduction</h2>\n<p>There are times that I need to simulate and analyze how a close loop system reacts if a digital PID control is used. A PID has an integrator component with an output that stores a value that can be increased or decreased by its input. My software options are Proteus VSM, PSIM C Block and LTSPICE. In Proteus VSM, I have tried coding a PID in Microchip MPLAB then upload the compiled hex file to a PIC controller in the schematic. In PSIM, I have tried using C Block and have pleasure in the quick result of the simulation. In LTSPICE, the components I know that can store a value are capacitor, inductor and lastly the \"sample\" component with a data and a clock input. I have utilized the \"sample\" component since I want a discrete integrator in LTSPICE .</p>\n<h2>Contents of the integrator.asc file :</h2>\n<pre>.SUBCKT integrator IN CLK RST IVAL OUT DEBUG<br>;andrew mosqueda<br>;andrewgs7311@gmail.com<br>.param bits=12 signed=1<br>.param maxv=2**(bits-signed)-1<br>.param minv=-signed*maxv<br>A1 A1_IN 0 CLK_ 0 0 0 a2_in 0 SAMPLEHOLD vhigh=maxv vlow=minv<br>A2 a2_in 0 CLK 0 0 0 A2_OUT 0 SAMPLEHOLD vhigh=maxv vlow=minv<br>A3 CLK 0 0 0 0 CLK_ 0 0 BUF vhigh=1 vlow=0<br>B1 A1_IN 0 V=if(v(rst), round(v(ival)), round(v(IN))+round(v(A2_OUT)))<br>B3 OUT 0 V=v(a2_out)<br>.ENDS</pre>\n<p>The above ascii file was generated from the schematic below:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://andrewmosqueda.github.io/media/posts/1/LTSPICE-integrator-schematic.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-2xl.jpg 1600w\"  alt=\"LTSPICE integrator schematic\" width=\"1147\" height=\"551\"></figure>\n<p>In the above schematic, I have utilized the \"sample\" components A1 and A2 as storage for the integration. A node (or net) inside the ascii file can be renamed to DEBUG if you want to see the waveform of that node in your simulation.</p>\n<p>In the succeeding article, I will discuss on using this discrete integrator in a buck PWM LTSPICE circuit then compare the result to the actual <a href=\"https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/\" target=\"_blank\" rel=\"noopener noreferrer\">digital implementation of buck PWM converter.</a></p>",
            "author": {
                "name": "Andrew Mosqueda"
            },
            "tags": [
            ],
            "date_published": "2021-08-02T19:38:08+08:00",
            "date_modified": "2021-11-14T15:35:35+08:00"
        }
    ]
}
