<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Andrew Mosqueda</title>
    <link href="https://andrewmosqueda.github.io/feed.xml" rel="self" />
    <link href="https://andrewmosqueda.github.io" />
    <updated>2021-08-25T21:41:15+08:00</updated>
    <author>
        <name>Andrew Mosqueda</name>
    </author>
    <id>https://andrewmosqueda.github.io</id>

    <entry>
        <title>Implementing 5V to 12V PWM Boost Converter in the DSPIC33CH Curiosity Development Board</title>
        <author>
            <name>Andrew Mosqueda</name>
        </author>
        <link href="https://andrewmosqueda.github.io/implementing-5v-to-12v-pwm-boos-converter-in-the-dspic33ch-curiosity-development-board/"/>
        <id>https://andrewmosqueda.github.io/implementing-5v-to-12v-pwm-boos-converter-in-the-dspic33ch-curiosity-development-board/</id>

        <updated>2021-08-25T21:02:35+08:00</updated>
            <summary>
                <![CDATA[
                    Introduction The dsPIC33CH Curiosity Development Board (DM330028) has a built in buck-boost circuit that we can experiment with. Unfortunately in the time of this writing, the code for the buck-boost converter that is provided by Microchip is only written in assembly language which I found&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Introduction</h2>
<p> The dsPIC33CH Curiosity Development Board (DM330028) has a built in buck-boost circuit that we can experiment with. Unfortunately in the time of this writing, the code for the buck-boost converter that is provided by Microchip is only written in assembly language which I found hard to comprehend. So I made my own program that is written in C language and using PID for the close loop control. Only voltage loop control is covered by this topic.</p>
<h2>Buck-Boost Converter Circuit</h2>
<p>Figure 1 below is the schematic of the buck boost circuit of the DSPIC33CH Curiosity Board. The DSPIC IC can control the boost transistor (Q2) switching through the RC15_S1PWM7L connection. The DSPIC IC should set low the RC14_S1PWM7H so that the Q6 P-MOSFET is always on (switch closed). </p>
<figure class="post__image" ><img loading="lazy" src="https://andrewmosqueda.github.io/media/posts/4/BuckBoost_Power_Circuit.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-xs.png 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-sm.png 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-md.png 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-lg.png 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-xl.png 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/BuckBoost_Power_Circuit-2xl.png 1600w"  alt="DM330038 DSPIC33CH Curiosity Development Board Buck Boost Circuit" width="970" height="633">
<figcaption >Figure 1 DM330028 DSPIC33CH Curiosity Development Board Buck-Boost Converter Corcuit</figcaption>
</figure>
<p>The output of the converter (Vout) is sensed by the DSPIC IC through RC1_VOUTFB connection as shown in Figure 2. For a 12V output, the voltage that is sensed on RC1_VOUTFB is 12V*1kΩ/(4.7kΩ+1kΩ) = 2.105V. <strong>Make sure that J13 is not shorted on the board. </strong>Shorting J13 will increase the gain and make the sense voltage clip to 3.3V. Shorting J13 is useful for <a href="https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/" target="_blank" rel="noopener noreferrer">buck operation</a>. I'll just let the circuit containing R70, R57, R65, R66 and Q7 as load. In my computation, the load will have a resistance of 3.7kΩ or a power consumption of 39mW.</p>
<figure class="post__image" ><img loading="lazy" src="https://andrewmosqueda.github.io/media/posts/4/Buck_Sense_Circuit.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-xs.png 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-sm.png 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-md.png 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-lg.png 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-xl.png 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Buck_Sense_Circuit-2xl.png 1600w"  alt="Figure 2 DM330028 DSPIC33CH Curiosity Development Board Buck-Boost Output Voltage Sense Circuit" width="573" height="332">
<figcaption >Figure 2 DM330028 DSPIC33CH Curiosity Development Board Buck-Boost Output Voltage Sense Circuit</figcaption>
</figure>
<h2>CORE SETUP</h2>
<p>The PWM control pins in Figure 1 are connected to the Slave Core of the IC so we need to make the source code of the PWM control in the Slave Core project. We also need to make a simple source code for the Master Core project just to start the Slave Core.</p>
<ol>
<li>Run MPLAB X IDE (I'm using version v5.50 at the time of this writing). Connect J20 of the Curiosity board to the PC so that the MPLAB application detects what board is connected.</li>
<li>After opening MPLAB, close any projects that are open on the left pane.</li>
</ol>
<p>MASTER CORE</p>
<ol>
<li>Ctrl+Shift+N to open the new project dialog box. Select Standalone Project then Click Next.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/new_project_dialog_box_MPLAB.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/new_project_dialog_box_MPLAB-2xl.jpg 1600w"  alt="MPLAB New Project Choose Project dialog box" width="898" height="621"></figure></li>
<li>Select Device dsPIC33CH128MP508 and Tool Starter Kits (PKOB)-SN:BUR182571251 then click Next. Note, there is a DM330028-2 version of the curiousity board so the device and tool will be different. Please refer to its user guide or check the actual part number of the dsPIC IC that is mounted on the board.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_select_device.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device-2xl.jpg 1600w"  alt="MPLAB New Project Select Device Dialog" width="897" height="617"></figure></li>
<li>Select Compiler XC16 (v1.70) then click next. You may have a newer version installed.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_select_compiler.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_compiler-2xl.jpg 1600w"  alt="MPLAB New Project Select Compiler Dialog" width="898" height="620"></figure></li>
<li>Name the project as "master". Save it to folder "boost" then click Finish.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-New-Project-Select-Program-Name-and-Folder-Dialog-2xl.jpg 1600w"  alt="MPLAB New Project Select Project Name and Folder Dialog Box" width="951" height="630"></figure></li>
</ol>
<p>SLAVE CORE</p>
<ol>
<li>Ctrl+Shift+N to open again the new project dialog box. Select Standalone Project then click Next.</li>
<li>Again, your curiosity may have a different device name but take note of the last two characters ("S1") for the device which means that it is the slave core. Select device dsPIC33CH128MO508S1 and Starter Kits (PKOB)-SN:BUR182571251 then click Next.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_select_device_slave.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_select_device_slave-2xl.jpg 1600w"  alt="MPLAB New Project Select Device dialog box" width="895" height="620"></figure></li>
<li>Select compiler XC16 (v1.70) then click next.</li>
<li>Name the project as "slave" and use the same project location with the master core. Click Finish.</li>
</ol>
<h2>CODE CONFIGURATION</h2>
<p>MASTER CORE</p>
<ol>
<li>On the Projects Pane, if the slave project is highlighted in bold, right click on master project and select "Set as Main Project".<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_Set_main_project.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Set_main_project-2xl.jpg 1600w"  alt="MPLAB X IDE Set as Main Project menu" width="412" height="671"></figure></li>
<li>Click the MCC button on the toolbox. a master.mc3 file will be created in the root of the master project folder after MCC has finished loading.</li>
<li>In the device resources pane, click the + on the SLAVE CORE.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_device_resources_slavecore.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_slavecore-2xl.jpg 1600w"  alt="MPLAB Device Resources Slave Core" width="465" height="292"></figure><br>After clicking the + icon, wait until the SLAVE CORE appears on the project resources pane.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_project_resources_slavecore.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_project_resources_slavecore-2xl.jpg 1600w"  alt="MPLAB Project Resources Slave Core" width="467" height="327"></figure></li>
<li>In the Slave Core Pane, name the Slave as "slave". Enable Protocol A and Protocol B. Set Protocol A Direction as M-&gt;S.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_slave_core_name.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_slave_core_name-2xl.jpg 1600w"  alt="MPLAB Master Settings Slave Name and Protocol Settings" width="927" height="517"></figure></li>
<li>In the Pin Manager Pane, set RC1, RC14 and RC15 as owned by the Slave Core. RC1 is the voltage sense input. RC14 and RC15 are the PWM pins for controlling the MOSFETS of the buck-boost circuit.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_pin_manager_master_slavepin_assign.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_pin_manager_master_slavepin_assign-2xl.jpg 1600w"  alt="MPLAB MCC Pin Manager Slave Core Ownership" width="1205" height="351"></figure></li>
<li>In the System Module Pane, set clock output pin as "OSC2 is general purpose digital I/O pin".<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB-clock-output-pin-configuration.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-clock-output-pin-configuration-2xl.jpg 1600w"  alt="MPLAB MCC Master Clock Output Pin Configuration" width="918" height="480"></figure></li>
<li>Go back to the Slave Core Pane and click Save Master Settings button. A file named master_config.mc3 will be generated on the root of the master folder after you click the Save Master Settings button.</li>
<li>On the Project Resources pane, click the Generate button on the Project Resources pane. If there are warnings, review first the Notifications [MCC] pane.</li>
<li>After confirmation on the generate configuration, you should see a Generation complete on the text output. After that, close the configurator by clicking the MCC button on the toolbar.</li>
</ol>
<p>SLAVE CORE</p>
<ol>
<li>On the Projects Pane, right click on the slave project and select Set as Main Project.</li>
<li>Click the MCC button on the toolbar. This will generate a file named slave.mc3 to the root of the slave project folder.</li>
<li>Go to the Master Core Pane then click Load Slave Settings from Master Configuration button.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/Load-Master-Settings.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/Load-Master-Settings-2xl.jpg 1600w"  alt="MPLAB MCC Load Master Settings" width="1087" height="477"></figure></li>
<li>In the Load Master Settings dialog box, browse to the master core folder and open the master_config.mc3 file.</li>
<li>In the Device Resources Pane, click the + on PWM. The PWM will appear on the Project Resources Pane afterwards.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_device_resources_PWM.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_PWM-2xl.jpg 1600w"  alt="MPLAB MCC Device Resources Pane" width="462" height="292"></figure></li>
<li>In the PWM Pane, select PWM Generator 7, rename the Custom Name to PWM_BOOST, enable PWM Generator, change the PWM Operation Mode to Independent Edge, dual output and change PWM Output Mode to Independent. Note that we can only use Generator 7 because it is the one connected to RC14 and RC15 PWM output.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB-MCC-PWM-Generator-configuration-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB-MCC-PWM-Generator-configuration-2-2xl.jpg 1600w"  alt="MPLAB MCC PWM Generator Configuration" width="738" height="386"></figure></li>
<li>Change the Requested Frequency to 40KHz.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_PWM_frequency_setting.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_frequency_setting-2xl.jpg 1600w"  alt="MPLAB MCC PWM Generator Frequency configuration" width="853" height="287"></figure><br>Below is the relationship of the Special Function Registers (SFR) to the Independent Edge dual output PWM generator from the dsPIC33/PIC24 FRM High-Resolution PWM with Fine Edge Placement document.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/dsPIC33_PIC24-dual-independent-PWM-SFR.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/dsPIC33_PIC24-dual-independent-PWM-SFR-2xl.jpg 1600w"  alt="dsPIC33/PIC24 dual independent output PWM SFR" width="350" height="373"></figure><br>Below table defines these SFRs and abbreviations according to my understanding.
<table style="border-collapse: collapse; width: 101.459%;" border="1">
<tbody>
<tr>
<td style="width: 20.2128%;">Abbreviation</td>
<td style="width: 81.4927%;">Definition</td>
</tr>
<tr>
<td style="width: 20.2128%;">PGxPER</td>
<td style="width: 81.4927%;">PWM Generator x (generator number) Period . The PWM<br>counter counts from 0 up to the value of this SFR. This value is<br>calculated as the value on the "PWM Input Clock Selection"<br>(8MHz) divided by the value on "Requested Frequency"<br>(40kHz) less 1 and is equal to 199 (0xC7).</td>
</tr>
<tr>
<td style="width: 20.2128%;">PGxDC</td>
<td style="width: 81.4927%;">PWM Generator x (generator number) high side output Duty<br>Cycle. The PWM generator high side output changes to 0<br>when the timer value is equal to the value of this SFR.</td>
</tr>
<tr>
<td style="width: 20.2128%;">PGxPHASE</td>
<td style="width: 81.4927%;">PWM Generator x (generator number) high side output Phase<br>or deadtime. The PWM generator high side output  starts<br>from 0 when timer value is 0 and changes to 1 when the timer<br>value is equal to the value of this SFR. We actually don't need<br>to use this.</td>
</tr>
<tr>
<td style="width: 20.2128%;">PWMxH</td>
<td style="width: 81.4927%;">PWM Generator x (generator number) high side output. For<br>the dsPIC33 IC that we are using, this output is connected to<br>the RC14 pin (control for the buck MOSFET). PWMxH = 1 if<br>Timer&gt;= PGxPHASE &amp; Counter &lt;= PGxDC else 0.</td>
</tr>
<tr>
<td style="width: 20.2128%;">PGxTRIGB</td>
<td style="width: 81.4927%;">PWM Generator x (generator number) low side output Duty<br>Cycle. The PWM generator low side output changes to 0 when<br>the timer value is equal to the value of this SFR.</td>
</tr>
<tr>
<td style="width: 20.2128%;">PGxTRIGA</td>
<td style="width: 81.4927%;">PWM Generator x (generator number) low side output phase<br>or deadtime. The PWM generator low side output starts from<br>0 when timer value is 0 and changes to 1 when the timer value<br>is equal to the value of this SFR.</td>
</tr>
<tr>
<td style="width: 20.2128%;">PWMxL</td>
<td style="width: 81.4927%;">PWM Generator x (generator number) low side output. For the<br>dsPIC33 IC that we are using, this output is connected to the<br>RC15 pin (control for the boost MOSFET). PWMxL = 1 if Timer<br>&gt;= PGxTRIGA &amp; Counter &lt;= PGxTRIGB else 0.</td>
</tr>
</tbody>
</table>
 The initialization of these SFRs will be automatically defined later on a pwm.c file generated by the MCC.</li>
<li>Change the ADC Trigger 1 to Trigger A Compare and Trigger A Compare time to 1ns.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_PWM_ADCtrigger_setting.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_ADCtrigger_setting-2xl.jpg 1600w"  alt="MPLAB MCC PWM ADC Trigger Configuration" width="523" height="268"></figure></li>
<li>Change the Data Update Trigger to Duty Cycle.<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_PWM_DataUpdate_setting.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_PWM_DataUpdate_setting-2xl.jpg 1600w"  alt="MPLAB MCC PWM Update Trigger Configuration" width="415" height="133"></figure><br>This setting means that the duty cycle of the generator (both H side and L side) will be updated every time PG7DC is updated.</li>
<li>In the Device Resources pane, click + of the ADC1 to transfer the device to the Project Resources.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_device_resources_ADC.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_device_resources_ADC-2xl.jpg 1600w"  alt="MPLAB MCC Device Resources ADC1" width="457" height="286"></figure></li>
<li>In the ADC1 pane, enable Core1, change Core1 channel to S1ANA1 and Trigger Source to Slave PWM1 Trigger1. Tick the Interrupt Box.<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_ADC_SelectedChannels_setting.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_ADC_SelectedChannels_setting-2xl.jpg 1600w"  alt="MPLAB MCC ADC Configuration" width="860" height="596"></figure></li>
<li>In the Pin Module Pane, change the name of RC1 to RC1_VOUTFB.<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_Slave_Pin_Module.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_Slave_Pin_Module-2xl.jpg 1600w"  alt="MPLAB MCC Pin Module Configuration" width="792" height="263"></figure></li>
<li>Review the MCC Notifications. Usually I get the warnings like below.<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_MCC_Notifications.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_MCC_Notifications-2xl.jpg 1600w"  alt="MPLAB MCC Slave notifications" width="1151" height="381"></figure></li>
<li>In the Project Resources pane, click Generate button. Click Yes to disregard the warnings and proceed generating the source files. Wait until a "Generation complete" text appears on the MPLAB Code Configurator prompt window.</li>
<li>Close the code configurator by clicking the MCC toolbar button.</li>
</ol>
<p>SET THE SLAVE CORE AS SECONDARY PROJECT OF MASTER CORE</p>
<ol>
<li>Set master project as the main project.</li>
<li>Right click on the Secondaries folder of master project and click Add Secondary Project...<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_add_secondary_project.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_secondary_project-2xl.jpg 1600w"  alt="MPLAB Add Secondary Project" width="387" height="375"></figure></li>
<li>In the Add Secondary Project dialog window, select slave.X and click Add button.<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_add_slavex.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_add_slavex-2xl.jpg 1600w"  alt="MPLAB Add Secondary Project dialog " width="807" height="511"></figure></li>
<li>Right-click again on the Secondaries Folder and select Properties. Tick the Build box of the properties dialog window then click OK.</li>
</ol>
<h2>ACTUAL CODING</h2>
<p>MASTER CORE SOURCE CODE</p>
<ol>
<li>Open the main.c file on the master project's "Sources Files" folder.</li>
<li>Below the #include "mcc_generated_files/system.h", add the following codes:<br><code>#include "mcc_generated_files/slave1.h"<br> #include "mcc_generated_files/pin_manager.h"</code></li>
<li>Below the SYSTEM_Initialize();, add the following codes:<br><code>SLAVE1_Program(); <br>SLAVE1_Start();</code><br>At the time of this writing, SLAVE1_Program() and SLAVE1_Start() functions are deprecated so I would expect I will need a replacement for these functions in the future.</li>
<li>Below should be how the master core main.c would look like:<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_master_code.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_master_code-2xl.jpg 1600w"  alt="MPLAB Master Core Source Code" width="507" height="561"></figure></li>
<li>Close the main.c file of the master core. Click Save when asked.</li>
</ol>
<p>SLAVE CORE SOURCE CODE</p>
<ol>
<li>Open the main.c file on the slave project's Source Files folder.</li>
<li>Below the #include "mcc_generated_files/system.h", add the following codes:<br><code>#include "mcc_generated_files/pin_manager.h" <br>#include "mcc_generated_files/pwm.h" <br>#include "mcc_generated_files/adc1.h" <br><br>/*PID function and variable definitions*/ <br>void PID(void); <br>int16_t n16_integrator_memory; <br>int16_t n16_reference; <br>int16_t n16_error; <br>int16_t n16_proportional;<br>int16_t n16_sum;<br>int16_t n16_limit; <br><br>#define target_voltage 12 <br>#define reference 200*target_voltage + 230 <br>#define p_gain 0.1 <br>#define i_gain 0.05</code><br>The p_gain and i_gain values are the parameters that you can adjust to fine tune the gain loop response of the boost converter. You can also fine tune the offset of the reference to get an exact 12V output.</li>
<li>Inside the int main(void), add the following codes after SYSTEM_Initialize();<br><code>// Initialize PWM to 0% duty cycle (The boost Q2 is NMOS, 1=on) <br>PG7TRIGB = 0; <br>// Duty cycle limit (ensure boost MOSFET doesn't short) <br>n16_limit = (int16_t)(PG7PER-10); <br>//Initialize PID variables <br>n16_integrator_memory = 0; <br>n16_reference = (int16_t) reference; <br>//Assign PID Handler <br>ADC1_SetRC1_VOUTFBInterruptHandler(PID);</code></li>
<li>After the int_main(void) function, add the following code:<br><code>void PID(void) <br>{<br>  n16_error = n16_reference - ADCBUF1;<br>  n16_integrator_memory = n16_integrator_memory + i_gain*n16_error; <br>  n16_proportional = p_gain*n16_error;<br>  n16_sum = n16_integrator_memory + n16_proportional;<br>  if (n16_sum &gt; n16_limit) {n16_sum = n16_limit;} <br>  if (n16_sum &lt; 0) {n16_sum = 0;} <br>  PG7TRIGB = n16_sum; <br>  PG7DC = 0; // Need this to update PG7TRIGB<br> }</code></li>
<li>The new main.c of the slave core should now look like below:<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/DSPIC33-boost-converter-source-code-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DSPIC33-boost-converter-source-code-2-2xl.jpg 1600w"  alt="MPLAB DSPIC33CH Boost Converter Source Code" width="611" height="922"></figure></li>
</ol>
<h2>RESULT</h2>
<ol>
<li>Be sure to set the master project as the main project.</li>
<li>Be sure that the Curiosity board is connected to the PC.</li>
<li>Click the program button on the toolbar<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_program_button.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_program_button-2xl.jpg 1600w"  alt="MPLAB program button" width="56" height="40"></figure>. Wait until the "Programming/Verify complete" is prompted on the Starter Kit on Board Pane.<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/MPLAB_programming_complete.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/MPLAB_programming_complete-2xl.jpg 1600w"  alt="MPLAB Starter Kit on Board" width="623" height="336"></figure></li>
<li>Below is my hardware setup to validate the result. I use ADALM2000 as oscilloscope.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/DM330028-with-ADALM2000.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/DM330028-with-ADALM2000-2xl.jpg 1600w"  alt="DM330028 dsPIC33CH Curiosity with ADALM2000" width="733" height="533"></figure></li>
<li>Below is the waveform taken from the ADALM2000 oscilloscope.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/4/ADALM2000-oscilloscope.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/4/responsive/ADALM2000-oscilloscope-2xl.jpg 1600w"  alt="ADALM2000 oscilloscope" width="1311" height="718"></figure></li>
</ol>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Implementing 5V to 3.3V PWM Buck Converter in the DSPIC33CH Curiosity Development Board</title>
        <author>
            <name>Andrew Mosqueda</name>
        </author>
        <link href="https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/"/>
        <id>https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/</id>

        <updated>2021-08-25T20:33:52+08:00</updated>
            <summary>
                <![CDATA[
                    Introduction The dsPIC33CH Curiosity Development Board (DM330028) has a built in buck-boost circuit that we can experiment with. Unfortunately in the time of this writing, the code for the buck-boost converter that is provided by Microchip is only written in assembly language which I found&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Introduction</h2>
<p>The dsPIC33CH Curiosity Development Board (DM330028) has a built in buck-boost circuit that we can experiment with. Unfortunately in the time of this writing, the code for the buck-boost converter that is provided by Microchip is only written in assembly language which I found hard to comprehend. So I made my own program that is written in C language and using PID for the close loop control. Only voltage loop control is covered by this topic.  </p>
<h2>Buck-Boost Converter Circuit</h2>
<p>Figure 1 below is the schematic of the buck boost circuit of the DSPIC33CH Curiosity Board. The DSPIC IC can control the buck transistor (Q6) switching through the RC14_S1PWM7H connection. Q6 is a PMOS so it needs a logic 0 to turn it on. The output of the converter (Vout) is sensed by the DSPIC IC through RC1_VOUTFB connection as shown in Figure 2. <strong>Make sure that J13 is shorted on the board</strong>. Removing the short on J13 will decrease the gain, make the sense voltage small and will have low resolution in the ADC. Removing the short on J13 is useful for boost operation because a higher output voltage will need a lower gain sense resistors. I am connecting a 91Ω resistor as load. For a 3.3V output, the power that will be drawn by the resistor is 3.3V*3.3V/91Ω = 120 milliwatt. RC15_S1PWM7L should be set to low all the time so that the boost transistor (Q2) is always open. </p>
<figure class="post__image" ><br><img loading="lazy" src="https://andrewmosqueda.github.io/media/posts/3/Buck_Power_Circuit.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-xs.png 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-sm.png 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-md.png 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-lg.png 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-xl.png 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Power_Circuit-2xl.png 1600w"  alt="DM330028 Buck Converter Power Circuit" width="970" height="633">
<figcaption >Figure 1 DSPIC33CH Curiosity Board Development Board Buck-Boost Converter Circuit</figcaption>
</figure>
<figure class="post__image" ><br><img loading="lazy" src="https://andrewmosqueda.github.io/media/posts/3/Buck_Sense_Circuit-2.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-xs.png 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-sm.png 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-md.png 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-lg.png 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-xl.png 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/Buck_Sense_Circuit-2-2xl.png 1600w"  alt="DM330028 Buck-Boost Output Sense Circuit" width="573" height="332">
<figcaption >Figure 2 DSPIC33CH Curiosity Development Board Buck-Boost Output Voltage Sense Circuit</figcaption>
</figure>
<h2>CORE SETUP</h2>
<p>The PWM control pins in Figure 1 are connected to the Slave Core of the IC so we need to make the source code of the PWM control in the Slave Core. We also need to make a simple source code for the Master Core just to start the Slave Core.</p>
<ol>
<li>Run MPLAB X IDE (I'm using vrsion v5.50 at the time of this writing). Connect J20 of the Curiosity board to your PC so that the MPLAB application detects what board is connected.</li>
<li>After opening MPLAB, close any projects that are open on the left pane.</li>
</ol>
<p>MASTER CORE</p>
<ol>
<li>Ctrl+Shift+N to open the new project dialog box. Select Standalone Project then Click Next.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/new_project_dialog_box_MPLAB-3.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/new_project_dialog_box_MPLAB-3-2xl.jpg 1600w"  alt="MPLAB New Project Dialog Box" width="898" height="621"></figure></li>
<li>Select Device dsPIC33CH128MP508 and Tool Starter Kits (PKOB)-SN:BUR182571251 then click Next. Note, there is a DM330028-2 version of the Curiosity board so the device and tool will be different. Please refer to its user guide or check the actual part number of the dsPIC IC that is mounted on the board.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_select_device.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device-2xl.jpg 1600w"  alt="MPLAB select device" width="897" height="617"></figure></li>
<li>Select Compiler XC16 (v1.70) then click next. You may have a newer version installed.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_select_compiler-3.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_compiler-3-2xl.jpg 1600w"  alt="MPLAB Select Compiler" width="898" height="620"></figure></li>
<li>Name the project as "master". I save it to folder "buck" then click Finish.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_project_name_and_folder-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_name_and_folder-2-2xl.jpg 1600w"  alt="MPLAB Project name and folder" width="947" height="622"></figure></li>
</ol>
<p>SLAVE CORE</p>
<ol>
<li>Ctrl+Shift+N to open again the new project dialog box. Select Standalone Project then click Next.</li>
<li>Again, your Curiosity board may have a different device name but take note of the last two characters ("S1") for the device which means that it is the slave core. Select device dsPIC33CH128MO508S1 and Starter Kits (PKOB)-SN:BUR182571251 then click Next. <br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_select_device_slave.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_select_device_slave-2xl.jpg 1600w"  alt="MPLAB select device slave" width="895" height="620"></figure></li>
<li>Select compiler XC16 (v1.70) then click next.</li>
<li>Name the project as "slave" and use the same project location with the master core. Click Finish.</li>
</ol>
<h2>CODE CONFIGURATION</h2>
<p>MASTER CORE</p>
<ol>
<li>On the Projects Pane, right click on master and select "Set as Main Project".<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_Set_main_project.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Set_main_project-2xl.jpg 1600w"  alt="MPLAB set as main project" width="412" height="671"></figure></li>
<li>Click the MCC button on the toolbox. master.mc3 file will be created in the root of the master project folder (..\master.x\master.mc3).</li>
<li>In the device resources pane, click the + on the SLAVE CORE.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_device_resources_slavecore-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_slavecore-2-2xl.jpg 1600w"  alt="MPLAB Device Resources Select Slave Core" width="465" height="292"></figure><br>After clicking it, the SLAVE CORE should appear on the project resources pane.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_project_resources_slavecore.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_project_resources_slavecore-2xl.jpg 1600w"  alt="MPLAB project resources slave core" width="467" height="327"></figure></li>
<li>In the Slave Core Pane, name the Slave as "slave". Enable Protocol A and Protocol B. Set Protocol A Direction as M-&gt;S.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_slave_core_name-3.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_core_name-3-2xl.jpg 1600w"  alt="MPLAB slave core name" width="927" height="517"></figure></li>
<li>In the Pin Manager Pane, set RC1, RC14 and RC15 as owned by the Slave Core. RC1 is the voltage feedback input. RC14 and RC15 are the PWM pins for controlling the MOSFETs of the buck-boost circuit,<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_pin_manager_master_slavepin_assign.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_pin_manager_master_slavepin_assign-2xl.jpg 1600w"  alt="MPLAB Master Pin Manager Slave Pin Assignment" width="1205" height="351"></figure></li>
<li>In the System Module Pane, set clock output pin as "OSC2 is general purpose digital I/O pin". <br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB-clock-output-pin-configuration.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB-clock-output-pin-configuration-2xl.jpg 1600w"  alt="MPLAB clock output pin configuration" width="918" height="480"></figure></li>
<li>Go back to the Slave Core Pane and click Save Master Settings button. A file named master_config.mc3 will be generated on the root of the master folder after you click the Save Master Settings button.</li>
<li>Lastly for the master configuration, click the Generate button on the Project Resources pane. If there are warnings, review first the Notifications [MCC] pane. </li>
<li>After confirmation on the generate configuration, you should see a Generation complete on the text output. After that, close the configurator by clicking the MCC toolbar button.</li>
</ol>
<p>SLAVE CORE</p>
<ol>
<li>On the Projects Pane, right click on the slave project and select Set as Main Project.</li>
<li>Click the MCC button on the toolbox. This will generate a file named slave.mc3 to the root of the slave project folder (..\slave.x\slave.mc3).</li>
<li>Go to the Master Core Pane then click Load Slave Settings from Master Configuration button.</li>
<li>In the Load Master Settings dialog box, browse to the master core folder and open the master_config.mc3 file. </li>
<li>In the Device Resources Pane, click the + on PWM. The PWM will appear on the Project Resources Pane afterwards.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_device_resources_PWM.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_PWM-2xl.jpg 1600w"  alt="MPLAB device resources PWM" width="462" height="292"></figure></li>
<li>In the PWM Pane, Select PWM Generator 7, rename to PWM_BUCK, enable PWM Generator and change PWM Output Mode to Independent. Note that we can only use Generator 7 because it is the one connected to RC14 and RC15 PWM output.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_PWM_generator_setting-3.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_generator_setting-3-2xl.jpg 1600w"  alt="MPLAB PWM Generator Settings" width="927" height="295"></figure></li>
<li>Change the Requested Frequency to 40KHz.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_PWM_frequency_setting.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_frequency_setting-2xl.jpg 1600w"  alt="MPLAB PWM frequency setting" width="853" height="287"></figure><br>Below is the relationship of the Special Function Registers (SFR) to the Independent Edge PWM generator from the dsPIC33/PIC24 FRM High-Resolution PWM with Fine Edge Placement document.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/dsPIC33_PIC24-Independent-Edge-PWM-SFR.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/dsPIC33_PIC24-Independent-Edge-PWM-SFR-2xl.jpg 1600w"  alt="dsPIC33_PIC24 Independent Edge PWM Special Function Register (FSR)" width="372" height="272"></figure><br>Below table defines these SFRs and abbreviations according to my understanding.<br>
<table style="border-collapse: collapse; width: 105.597%;" border="1">
<tbody>
<tr>
<td style="width: 23.8602%;">Abbreviation</td>
<td style="width: 81.8165%;">Definition</td>
</tr>
<tr>
<td style="width: 23.8602%;">SOC</td>
<td style="width: 81.8165%;">Start Of Counter</td>
</tr>
<tr>
<td style="width: 23.8602%;">EOC</td>
<td style="width: 81.8165%;">End Of Counter</td>
</tr>
<tr>
<td style="width: 23.8602%;">PGxPER</td>
<td style="width: 81.8165%;">PWM Generator x (generator number) Period. The PWM<br>counter counts from 0 up to the value of this SFR. This value is<br>calculated as the value on "PWM Input Clock Selection"<br>(8MHz) divided by the value on "Requested Frequency"<br>(40kHz) less 1 and is equal to 199 (0xC7).</td>
</tr>
<tr>
<td style="width: 23.8602%;">PGxDC</td>
<td style="width: 81.8165%;">PWM Generator x (generator number) Duty Cycle. The PWM<br>generator output changes to 0 when the counter is equal to<br>the value of this SFR. </td>
</tr>
<tr>
<td style="width: 23.8602%;">PGxPHASE</td>
<td style="width: 81.8165%;">PWM Generator x (generator number) Phase or deadtime.<br>The output of the PWM generator starts from 0 when counter<br>value is 0 and changes to 1 when the counter value is equal to<br>the value of this SFR.</td>
</tr>
<tr>
<td style="width: 23.8602%;">PWMx</td>
<td style="width: 81.8165%;">Pulse Width Modulation x (generator number) output. PWMx<br>= 1 if Counter&gt;=PGxPHASE &amp; Counter &lt;= PGxDC else 0. For<br>the dsPIC33 IC that we are using, this output is connected to<br>the RC14 pin.</td>
</tr>
</tbody>
</table>
The initialization of these SFRs will be automatically defined later on a pwm.c file generated by the MCC. </li>
<li>Change the ADC Trigger 1 to Trigger A Compare and Trigger A Compare time to 1ns.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_PWM_ADCtrigger_setting.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_ADCtrigger_setting-2xl.jpg 1600w"  alt="MPLAB PWM ADC Trigger Setting" width="523" height="268"></figure></li>
<li>Change the Data Update Trigger to Duty Cycle.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_PWM_DataUpdate_setting.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_PWM_DataUpdate_setting-2xl.jpg 1600w"  alt="MPLAB PWM Data Update Settings" width="415" height="133"></figure></li>
<li>In the Device Resources pane, click + of the ADC1 to transfer the device to the Project Resources.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_device_resources_ADC.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_device_resources_ADC-2xl.jpg 1600w"  alt="MPLAB Device Resources ADC" width="457" height="286"></figure></li>
<li>In the ADC1 pane, enable Core1, change  Core1 channel to S1ANA1 and Trigger Source to Slave PWM1 Trigger1. Tick the Interrupt Box.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_ADC_SelectedChannels_setting-3.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_ADC_SelectedChannels_setting-3-2xl.jpg 1600w"  alt="MPLAB ADC Selected Channels Setting" width="860" height="596"></figure></li>
<li>In the Pin Module Pane, change the name of RC1 to RC1_VOUTFB.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_Slave_Pin_Module.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_Slave_Pin_Module-2xl.jpg 1600w"  alt="MPLAB Slave Pin Module Setting" width="792" height="263"></figure></li>
<li>Review the MCC Notifications. Usually I get the warnings like below.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_MCC_Notifications-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_MCC_Notifications-2-2xl.jpg 1600w"  alt="MPLAB MCC notification" width="1151" height="381"></figure></li>
<li>In the Project Resources pane, click Generate button. Click Yes to disregard the warnings and proceed generating the source files. Wait until a "Generation complete" text appears on the MPLAB Code Configurator prompt window.</li>
<li>Close the code configurator by clicking the MCC toolbar button.</li>
</ol>
<p>SET THE SLAVE CORE AS SECONDARY PROJECT OF MASTER CORE</p>
<ol>
<li>Set master project as the main project.</li>
<li>Right click on the Secondaries folder of master project and click Add Secondary  Project...<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_add_secondary_project.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_secondary_project-2xl.jpg 1600w"  alt="MPLAB Add Secondary project to master" width="387" height="375"></figure></li>
<li>In the Add Secondary Project dialog window, select slave.X and click Add button.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_add_slavex.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_add_slavex-2xl.jpg 1600w"  alt="MPLAB Add slave to master" width="807" height="511"></figure></li>
<li>Right-click again on the Secondaries Folder and select Properties. Tick the Build box of the properties dialog window then click OK.</li>
</ol>
<h2>ACTUAL CODING</h2>
<p>MASTER CORE SOURCE CODE</p>
<ol>
<li>Open the main.c file on the master project's "Source Files" folder.</li>
<li>Below the #include "mcc_generated_files/system.h", add the following codes:<code><br>#include "mcc_generated_files/slave1.h" <br>#include "mcc_generated_files/pin_manager.h"</code></li>
<li>Below the SYSTEM_Initialize();, add the following codes:<code><br>SLAVE1_Program();<br>SLAVE1_Start();</code></li>
<li>Below should be how the master core main.c would look like:<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_master_code.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_master_code-2xl.jpg 1600w"  alt="MPLAB master source" width="507" height="561"></figure></li>
<li>Close the main.c file of the master core. Click Save when asked.</li>
</ol>
<p>SLAVE CORE SOURCE CODE</p>
<ol>
<li>Open the main.c file on the slave project's Source Files folder.</li>
<li>Below the #include "mcc_generated_files/system.h", add the following codes:<code><br>#include "mcc_generated_files/pin_manager.h"<br>#include "mcc_generated_files/pwm.h"<br>#include "mcc_generated_files/adc1.h"<br><br>/*PID function and variable definitions*/<br>void PID(void);<br>int16_t n16_integrator_memory;<br>int16_t n16_reference;<br>int16_t n16_error;<br>int16_t n16_proportional;<br><br>#define target_voltage  3.3<br>#define reference       666.7*target_voltage + 17.6<br>#define p_gain          0.1<br>#define i_gain          0.05</code><br>The p_gain and i_gain values are the parameters that you can adjust to fine tune the gain loop response of the buck converter.</li>
<li>Inside the int main(void), add the following codes after SYSTEM_Initialize();<code><br>// Initialize PWM to 100% duty cycle (Q6 is PMOS, 0=on)<br>PG7DC = PG7PER; // Fclk/Fpwm - 1, resolution - 1<br>//Initialize PID variables<br>n16_integrator_memory = 0;<br>n16_reference = (int16_t) reference;<br>//Assign PID Handler<br> ADC1_SetRC1_VOUTFBInterruptHandler(PID);</code></li>
<li>After the int main(void) function, add the following code:<code><br>void PID(void)<br>{<br>  n16_error = n16_reference - ADCBUF1;<br>  n16_integrator_memory = n16_integrator_memory + i_gain*n16_error;<br>  n16_proportional = p_gain*n16_error;<br>  PG7DC = PG7PER - n16_integrator_memory - n16_proportional;<br>}</code></li>
<li>The new main.c of the slave core should now look like below:<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_slave_code.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_slave_code-2xl.jpg 1600w"  alt="MPLAB Slave PWM Source Code" width="583" height="841"></figure></li>
</ol>
<h2>RESULT<br><br></h2>
<ol>
<li>Be sure to set the master project as the main project.</li>
<li>Be sure that the Curiosity board is connected to the PC.</li>
<li>Click the program button on the toolbar. <figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_program_button.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_program_button-2xl.jpg 1600w"  alt="MPLAB Program Button" width="56" height="40"></figure> Wait until the "Programming/Verify complete" is prompted on the Starter Kit on Board Pane.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/MPLAB_programming_complete.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/MPLAB_programming_complete-2xl.jpg 1600w"  alt="MPLAB Programming Complete" width="623" height="336"></figure></li>
<li>Below is my hardware setup to validate the result. I use ADALM2000 as oscilloscope.<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/DSPIC33CH_hardware_setup-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH_hardware_setup-2-2xl.jpg 1600w"  alt="DM330028 dsPIC33CH Buck Converter with ADALM2000 oscilloscope" width="1082" height="728"></figure></li>
<li>Below is the waveform taken from the ADALM2000 oscilloscope:<br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/3/DSPIC33CH-buck-waveform-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/3/responsive/DSPIC33CH-buck-waveform-2-2xl.jpg 1600w"  alt="Scopy Oscilloscope" width="1223" height="678"></figure>The mean of the output voltage is 3.22V, a little offset from the 3.3V target. It could be due to the tolerance of the sense resistors, opamp or ADC of the DSPIC IC. The reference in the source code can ba adjusted to compensate this offset. We can also see that the duty measured is 20.03%.</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Simulation of Buck Converter using discrete PID in LTSPICE</title>
        <author>
            <name>Andrew Mosqueda</name>
        </author>
        <link href="https://andrewmosqueda.github.io/simulation-of-buck-converter-using-discrete-pid-in-ltspice/"/>
        <id>https://andrewmosqueda.github.io/simulation-of-buck-converter-using-discrete-pid-in-ltspice/</id>

        <updated>2021-08-25T21:41:15+08:00</updated>
            <summary>
                <![CDATA[
                    If you are in a hurry and want to immediately verify the simulation, download and unzipped the file below then run the buck.asc file in LTSPICE: Discrete PWM buck converter This article presents a LTSPICE simulation of a PWM buck converter controlled by a discrete&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>If you are in a hurry and want to immediately verify the simulation, download and unzipped the file below then run the buck.asc file in LTSPICE:</p>
<p><a href="https://andrewmosqueda.github.io/media/files/discrete_buck_converter.zip" target="_blank" rel="noopener noreferrer">Discrete PWM buck converter</a></p>
<figure class="post__image">Below left is the schematic on the buck.asc file and below right should be the result of the LTSPICE simulation.<br><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/2/discrete_buck_pwm.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/discrete_buck_pwm-2xl.jpg 1600w"  alt="LTSPICE Digital PWM Buck Converter" width="1916" height="922"></figure>
<h2>Introduction</h2>
<p>This article presents a LTSPICE simulation of a PWM buck converter controlled by a discrete PID. The simulation result will be compared to the result of the actual implementation of a digitally controlled buck converter (<a href="https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/" target="_blank" rel="noopener noreferrer">Buck converter</a>). Below table is a comparison of the source code from the the actual implementation (DSPIC33 IC) and the components used in this LTSPICE simulation.</p>
<table style="border-collapse: collapse; width: 98.8593%;" border="1">
<tbody>
<tr>
<td style="width: 49.2311%;"><strong>MPLAB (DSPIC33) Source Code</strong></td>
<td style="width: 56.8252%;"><strong>LTSPICE component / parameter</strong></td>
</tr>
<tr>
<td style="width: 49.2311%;">
<p><span style="text-decoration: underline;">PARAMETERS</span></p>
<p><span style="font-size: small;">#define target_voltage  3.3<br>#define reference       666.7*target_voltage + 17.6<br>#define p_gain          0.1<br>#define i_gain          0.05</span></p>
</td>
<td style="width: 56.8252%;">
<p><span style="text-decoration: underline;">PARAMETERS</span></p>
<p><span style="font-size: small;">.param target_voltage=3.3 p_gain=0.1 i_gain=0.05<br>.param reference=(666.7*target_voltage)+17.6</span></p>
</td>
</tr>
<tr>
<td style="width: 49.2311%;">
<p><span style="text-decoration: underline;">ANALOG TO DIGITAL CONVERSION</span></p>
<p><span style="font-size: small;">(use the default configuration of ADC)</span></p>
</td>
<td style="width: 56.8252%;">
<p><span style="text-decoration: underline;">ANALOG TO DISCRETE CONVERSION</span></p>
<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/2/ADC.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ADC-2xl.jpg 1600w"  alt="LTSPICE Analog to Digital Conversion" width="602" height="57"></figure>
</td>
</tr>
<tr>
<td style="width: 49.2311%;">
<p><span style="text-decoration: underline;">ERROR CALCULATION</span></p>
<p><span style="font-size: small;">n16_error = n16_reference - ADCBUF1;</span></p>
</td>
<td style="width: 56.8252%;">
<p><span style="text-decoration: underline;">ERROR CALCULATION</span></p>
<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/2/LTSPICE_error_calculation.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_error_calculation-2xl.jpg 1600w"  alt="LTSPICE Error calculation" width="602" height="57"></figure>
</td>
</tr>
<tr>
<td style="width: 49.2311%;">
<p><span style="text-decoration: underline;">INTEGRATION</span></p>
<p><span style="font-size: small;">n16_integrator_memory = n16_integrator_memory + <br> i_gain*n16_error;</span></p>
</td>
<td style="width: 56.8252%;">
<p><span style="text-decoration: underline;">INTEGRATION</span></p>
<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/2/LTSPICE_integration.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_integration-2xl.jpg 1600w"  alt="LTSPICE Discrete Integrator" width="601" height="127"></figure>
</td>
</tr>
<tr>
<td style="width: 49.2311%;">
<p><span style="text-decoration: underline;">PROPORTIONAL</span></p>
<p><span style="font-size: small;">n16_proportional = p_gain*n16_error;</span></p>
</td>
<td style="width: 56.8252%;">
<p><span style="text-decoration: underline;">PROPORTIONAL</span></p>
<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/2/LTSPICE_proportional.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_proportional-2xl.jpg 1600w"  alt="LTSPICE proportional computation" width="602" height="53"></figure>
</td>
</tr>
<tr>
<td style="width: 49.2311%;">
<p><span style="text-decoration: underline;">DUTY CYCLE</span></p>
<p><span style="font-size: small;">PG7DC = PG7PER - n16_integrator_memory <br> - n16_proportional;</span></p>
</td>
<td style="width: 56.8252%;">
<p><span style="text-decoration: underline;">DUTY CYCLE</span></p>
<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/2/LTSPICE_duty_cycle.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_duty_cycle-2xl.jpg 1600w"  alt="LTSPICE Duty Cycle" width="603" height="55"></figure>
</td>
</tr>
<tr>
<td style="width: 49.2311%;">
<p><span style="text-decoration: underline;">PWM GENERATION</span></p>
<p><span style="font-size: small;">Configured in MCC PWM7, pwm freq=40kHz,<br>master clock frequency=8MHz</span></p>
</td>
<td style="width: 56.8252%;">
<p><span style="text-decoration: underline;">PWM GENERATION</span></p>
<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/2/LTSPICE_pwm_setting.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_setting-2xl.jpg 1600w"  alt="LTSPICE PWM Setting" width="400" height="47"></figure><br><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/2/LTSPICE_pwm_generator.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/LTSPICE_pwm_generator-2xl.jpg 1600w"  alt="LTSPICE PWM Generator" width="712" height="123"></figure>
</td>
</tr>
</tbody>
</table>
<p>Note: I used the floor() function in LTSPICE to convert the values into discrete.</p>
<p> </p>
<h2>Result</h2>
<p>Below is the resulting waveform from 9.68ms to 10ms of the simulation. We can see that the on time width measured is 3.34ms which is only 16.5% duty cycle. </p>
<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/2/ltspice_pwm_waveform.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform-2xl.jpg 1600w"  alt="LTSPICE PWM waveform" width="943" height="603"></figure>
<p>In the <a href="https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/" target="_blank" rel="noopener noreferrer">actual</a> implementation, the duty cycle measured by the oscilloscope was 20%. Most likely cause why the actual implementation has higher duty cycle is that the MOSFET used in the actual implementation has a higher turn on resistance (BSS308PE Rdson=130mΩ@4.5V). The MOSFET (IRF7210) I used in the LTSPICE simulation has a Rdson of only 5mΩ. I changed the MOSFET to part number FDC5614P which has a Rdson value of  105mΩ and run the simulation again, the result below is now similar to the actual implementation.</p>
<figure class="post__image" ><img loading="lazy" src="https://andrewmosqueda.github.io/media/posts/2/ltspice_pwm_waveform2-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/2/responsive/ltspice_pwm_waveform2-2-2xl.jpg 1600w"  alt="LTSPICE PWM Buck Converter waveform" width="942" height="598">
<figcaption >PWM on pulse width increased with higher Rdson</figcaption>
</figure>
<h2>Conclusion</h2>
<p>It was demonstrated that discrete control of PWM can be simulated in LTSPICE that can generate similar result with an actual implementation. It is better if we use the right part model. For example, the Rdson has a significant impact on the duty cycle.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to implement a discrete integrator in LTSPICE</title>
        <author>
            <name>Andrew Mosqueda</name>
        </author>
        <link href="https://andrewmosqueda.github.io/implementing-a-discrete-integrator-in-ltspice/"/>
        <id>https://andrewmosqueda.github.io/implementing-a-discrete-integrator-in-ltspice/</id>

        <updated>2021-08-15T12:02:32+08:00</updated>
            <summary>
                <![CDATA[
                    If you are in a hurry and want to immediately verify its function, download and unzipped the file below then run the TestBench.asc file in LTSPICE: integrator.zip Below left is the schematic on the TestBench.asc file and below right side should be the result of&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>If you are in a hurry and want to immediately verify its function, download and unzipped the file below then run the TestBench.asc file in LTSPICE: </p>
<p><a href="https://andrewmosqueda.github.io/media/files/Integrator.zip" target="_blank" rel="noopener noreferrer">integrator.zip</a></p>
<p>Below left is the schematic on the TestBench.asc file and below right side should be the result of the simulation.</p>
<h2><figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/1/integrator_bench.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/1/responsive/integrator_bench-2xl.jpg 1600w"  alt="LTSPICE integrator" width="1915" height="883"></figure></h2>
<h2> </h2>
<h2>How to use the integrator in another LTSPICE schematic file:</h2>
<ol>
<li>Copy the integrator.net and integrator.asy files to the folder where your LTSPICE schematic is saved.</li>
<li>In the LTSPICE schematic window, press F2 to display the "Select Component Symbol" dialog box.</li>
<li>In the "Select Component Symbol" dialog box. 1st, select the folder where your LTSPICE schematic is saved. 2nd, select the "integrator" from the list then click the OK button.
<figure class="post__image post__image--center" ><img loading="lazy" src="https://andrewmosqueda.github.io/media/posts/1/select_component_dialog.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/1/responsive/select_component_dialog-2xl.jpg 1600w"  alt="" width="567" height="542">
<figcaption >Select Component Symbol</figcaption>
</figure>
</li>
<li>Lastly, click anywhere in the schematic to place the integrator component.</li>
</ol>
<p> </p>
<h2>Pin Definition</h2>
<table style="border-collapse: collapse; width: 130%; height: 450px;" border="1">
<tbody>
<tr>
<td style="width: 13.7669%;">PIN NAME</td>
<td style="width: 9.62921%;">TYPE</td>
<td style="width: 54.9502%;">DEFINITION</td>
</tr>
<tr>
<td style="width: 13.7669%;">IN</td>
<td style="width: 9.62921%;">Input</td>
<td style="width: 54.9502%;">The voltage value at this pin is rounded to the nearest integer and then added to the voltage of the OUT pin during positive transition of the CLK pin.</td>
</tr>
<tr>
<td style="width: 13.7669%;">CLK</td>
<td style="width: 9.62921%;">Input</td>
<td style="width: 54.9502%;">Integration is executed during positive transition of the voltage on this pin. HIGH&gt;0.5V.  LOW&lt;0.5V</td>
</tr>
<tr>
<td style="width: 13.7669%;">RST</td>
<td style="width: 9.62921%;">Input</td>
<td style="width: 54.9502%;">The OUT pin is set to the rounded value of the voltage at the IVAL pin when RST pin is HIGH. HIGH&gt;0.5V. LOW&lt;0.5V</td>
</tr>
<tr>
<td style="width: 13.7669%;">IVAL</td>
<td style="width: 9.62921%;">Input</td>
<td style="width: 54.9502%;">The voltage value at this pin is rounded to the nearest integer and then transferred to the OUT pin when RST pin is HIGH.</td>
</tr>
<tr>
<td style="width: 13.7669%;">OUT</td>
<td style="width: 9.62921%;">Output</td>
<td style="width: 54.9502%;">This pin outputs the integrated value.</td>
</tr>
<tr>
<td style="width: 13.7669%;">DEBUG</td>
<td style="width: 9.62921%;">Output</td>
<td style="width: 54.9502%;">Reserved for debugging the integrator.</td>
</tr>
</tbody>
</table>
<h2> </h2>
<h2>Introduction</h2>
<p>There are times that I need to simulate and analyze how a close loop system reacts if a digital PID control is used. A PID has an integrator component with an output that stores a value that can be increased or decreased by its input. My software options are Proteus VSM, PSIM C Block and LTSPICE. In Proteus VSM, I have tried coding a PID in Microchip MPLAB then upload the compiled hex file to a PIC controller in the schematic. In PSIM, I have tried using C Block and have pleasure in the quick result of the simulation. In LTSPICE, the components I know that can store a value are capacitor, inductor and lastly the "sample" component with a data and a clock input. I have utilized the "sample" component since I want a discrete integrator in LTSPICE .</p>
<h2>Contents of the integrator.asc file :</h2>
<pre>.SUBCKT integrator IN CLK RST IVAL OUT DEBUG<br>;andrew mosqueda<br>;andrewgs7311@gmail.com<br>.param bits=12 signed=1<br>.param maxv=2**(bits-signed)-1<br>.param minv=-signed*maxv<br>A1 A1_IN 0 CLK_ 0 0 0 a2_in 0 SAMPLEHOLD vhigh=maxv vlow=minv<br>A2 a2_in 0 CLK 0 0 0 A2_OUT 0 SAMPLEHOLD vhigh=maxv vlow=minv<br>A3 CLK 0 0 0 0 CLK_ 0 0 BUF vhigh=1 vlow=0<br>B1 A1_IN 0 V=if(v(rst), round(v(ival)), round(v(IN))+round(v(A2_OUT)))<br>B3 OUT 0 V=v(a2_out)<br>.ENDS</pre>
<p>The above ascii file was generated from the schematic below:</p>
<figure class="post__image"><img loading="lazy"  src="https://andrewmosqueda.github.io/media/posts/1/LTSPICE-integrator-schematic.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-xs.jpg 300w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-sm.jpg 480w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-md.jpg 768w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-lg.jpg 1024w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-xl.jpg 1360w ,https://andrewmosqueda.github.io/media/posts/1/responsive/LTSPICE-integrator-schematic-2xl.jpg 1600w"  alt="LTSPICE integrator schematic" width="1147" height="551"></figure>
<p>In the above schematic, I have utilized the "sample" components A1 and A2 as storage for the integration. A node (or net) inside the ascii file can be renamed to DEBUG if you want to see the waveform of that node in your simulation.</p>
<p>In the succeeding article, I will discuss on using this discrete integrator in a buck PWM LTSPICE circuit then compare the result to the actual <a href="https://andrewmosqueda.github.io/implementing-5v-to-33v-buck-converter-in-the-dspic33ch-curiosity-development-board/" target="_blank" rel="noopener noreferrer">digital implementation of buck PWM converter.</a></p>
            ]]>
        </content>
    </entry>
</feed>
